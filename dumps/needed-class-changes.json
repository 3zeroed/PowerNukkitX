{
  "cn.nukkit.blockstate.ByteMutableBlockState": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.blockstate.ByteMutableBlockState#getPersistenceValue(String)"
    ]
  },
  "cn.nukkit.blockstate.IBlockState": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.blockstate.IBlockState#getBigId()"
    ]
  },
  "cn.nukkit.blockstate.IntMutableBlockState": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.blockstate.IntMutableBlockState#getLegacyDamage()"
    ]
  },
  "cn.nukkit.blockstate.LongMutableBlockState": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.blockstate.LongMutableBlockState#getLegacyDamage()",
      "cn.nukkit.blockstate.LongMutableBlockState#validate()"
    ]
  },
  "cn.nukkit.blockstate.MutableBlockState": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.blockstate.MutableBlockState#getBigId()",
      "cn.nukkit.blockstate.MutableBlockState#getBitSize()",
      "cn.nukkit.blockstate.MutableBlockState#getBlockId()",
      "cn.nukkit.blockstate.MutableBlockState#getFullId()",
      "cn.nukkit.blockstate.MutableBlockState#getProperties()"
    ]
  },
  "cn.nukkit.blockstate.ZeroMutableBlockState": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.blockstate.ZeroMutableBlockState#validate()"
    ]
  },
  "cn.nukkit.command.CapturingCommandSender": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.command.CapturingCommandSender#<init>(String, boolean, Permissible)"
    ]
  },
  "cn.nukkit.dispenser.ProjectileDispenseBehavior": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.dispenser.ProjectileDispenseBehavior#getAccuracy()",
      "cn.nukkit.dispenser.ProjectileDispenseBehavior#getMotion()"
    ]
  },
  "cn.nukkit.entity.Entity": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.Entity#canBePushed()",
      "cn.nukkit.entity.Entity#isTouchingWater()",
      "cn.nukkit.entity.Entity#isUndead()",
      "cn.nukkit.entity.Entity#onPushByPiston(BlockEntityPistonArm)"
    ]
  },
  "cn.nukkit.entity.EntityHuman": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.EntityHuman#onBlock(Entity, boolean)"
    ]
  },
  "cn.nukkit.entity.EntityLiving": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.EntityLiving#isBlocking()",
      "cn.nukkit.entity.EntityLiving#onBlock(Entity, boolean)",
      "cn.nukkit.entity.EntityLiving#setBlocking(boolean)"
    ]
  },
  "cn.nukkit.entity.item.EntityExpBottle": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.item.EntityExpBottle#addHitEffect()"
    ]
  },
  "cn.nukkit.entity.item.EntityFallingBlock": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.item.EntityFallingBlock#breakOnLava"
    ]
  },
  "cn.nukkit.entity.item.EntityPainting": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.item.EntityPainting#onPushByPiston(BlockEntityPistonArm)"
    ]
  },
  "cn.nukkit.entity.item.EntityPotion": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.item.EntityPotion#splash(Entity)"
    ]
  },
  "cn.nukkit.entity.item.EntityPotionLingering": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.item.EntityPotionLingering#splash(Entity)"
    ]
  },
  "cn.nukkit.entity.mob.EntityBlaze": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityBlaze#isPreventingSleep(Player)"
    ]
  },
  "cn.nukkit.entity.mob.EntityCaveSpider": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityCaveSpider#isPreventingSleep(Player)"
    ]
  },
  "cn.nukkit.entity.mob.EntityCreeper": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityCreeper#isPreventingSleep(Player)"
    ]
  },
  "cn.nukkit.entity.mob.EntityDrowned": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityDrowned#isPreventingSleep(Player)",
      "cn.nukkit.entity.mob.EntityDrowned#isUndead()"
    ]
  },
  "cn.nukkit.entity.mob.EntityElderGuardian": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityElderGuardian#isPreventingSleep(Player)"
    ]
  },
  "cn.nukkit.entity.mob.EntityEnderman": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityEnderman#isPreventingSleep(Player)"
    ]
  },
  "cn.nukkit.entity.mob.EntityEndermite": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityEndermite#isPreventingSleep(Player)"
    ]
  },
  "cn.nukkit.entity.mob.EntityEvoker": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityEvoker#isPreventingSleep(Player)"
    ]
  },
  "cn.nukkit.entity.mob.EntityGuardian": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityGuardian#isPreventingSleep(Player)"
    ]
  },
  "cn.nukkit.entity.mob.EntityHoglin": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityHoglin#isBaby()"
    ]
  },
  "cn.nukkit.entity.mob.EntityHusk": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityHusk#isPreventingSleep(Player)",
      "cn.nukkit.entity.mob.EntityHusk#isUndead()"
    ]
  },
  "cn.nukkit.entity.mob.EntityPhantom": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityPhantom#isPreventingSleep(Player)",
      "cn.nukkit.entity.mob.EntityPhantom#isUndead()"
    ]
  },
  "cn.nukkit.entity.mob.EntityPiglin": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityPiglin#isBaby()",
      "cn.nukkit.entity.mob.EntityPiglin#isPreventingSleep(Player)"
    ]
  },
  "cn.nukkit.entity.mob.EntityPiglinBrute": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityPiglinBrute#isPreventingSleep(Player)"
    ]
  },
  "cn.nukkit.entity.mob.EntityPillager": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityPillager#isPreventingSleep(Player)"
    ]
  },
  "cn.nukkit.entity.mob.EntityRavager": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityRavager#isPreventingSleep(Player)"
    ]
  },
  "cn.nukkit.entity.mob.EntitySilverfish": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntitySilverfish#isPreventingSleep(Player)"
    ]
  },
  "cn.nukkit.entity.mob.EntitySkeleton": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntitySkeleton#isPreventingSleep(Player)",
      "cn.nukkit.entity.mob.EntitySkeleton#isUndead()"
    ]
  },
  "cn.nukkit.entity.mob.EntitySpider": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntitySpider#isPreventingSleep(Player)"
    ]
  },
  "cn.nukkit.entity.mob.EntityStray": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityStray#isPreventingSleep(Player)",
      "cn.nukkit.entity.mob.EntityStray#isUndead()"
    ]
  },
  "cn.nukkit.entity.mob.EntityVex": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityVex#isPreventingSleep(Player)"
    ]
  },
  "cn.nukkit.entity.mob.EntityVindicator": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityVindicator#isPreventingSleep(Player)"
    ]
  },
  "cn.nukkit.entity.mob.EntityWitch": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityWitch#isPreventingSleep(Player)"
    ]
  },
  "cn.nukkit.entity.mob.EntityWither": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityWither#isPreventingSleep(Player)",
      "cn.nukkit.entity.mob.EntityWither#isUndead()"
    ]
  },
  "cn.nukkit.entity.mob.EntityWitherSkeleton": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityWitherSkeleton#isPreventingSleep(Player)",
      "cn.nukkit.entity.mob.EntityWitherSkeleton#isUndead()"
    ]
  },
  "cn.nukkit.entity.mob.EntityZoglin": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityZoglin#isBaby()",
      "cn.nukkit.entity.mob.EntityZoglin#isPreventingSleep(Player)",
      "cn.nukkit.entity.mob.EntityZoglin#isUndead()"
    ]
  },
  "cn.nukkit.entity.mob.EntityZombie": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityZombie#isPreventingSleep(Player)",
      "cn.nukkit.entity.mob.EntityZombie#isUndead()"
    ]
  },
  "cn.nukkit.entity.mob.EntityZombiePigman": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityZombiePigman#isPreventingSleep(Player)",
      "cn.nukkit.entity.mob.EntityZombiePigman#isUndead()"
    ]
  },
  "cn.nukkit.entity.mob.EntityZombieVillager": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityZombieVillager#isPreventingSleep(Player)",
      "cn.nukkit.entity.mob.EntityZombieVillager#isUndead()"
    ]
  },
  "cn.nukkit.entity.mob.EntityZombieVillagerV1": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityZombieVillagerV1#isUndead()"
    ]
  },
  "cn.nukkit.entity.passive.EntityBee": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.passive.EntityBee#getHasNectar()",
      "cn.nukkit.entity.passive.EntityBee#isAngry()",
      "cn.nukkit.entity.passive.EntityBee#leftBeehive(BlockEntityBeehive)",
      "cn.nukkit.entity.passive.EntityBee#nectarDelivered(BlockEntityBeehive)",
      "cn.nukkit.entity.passive.EntityBee#setAngry(boolean)",
      "cn.nukkit.entity.passive.EntityBee#setAngry(Player)",
      "cn.nukkit.entity.passive.EntityBee#setHasNectar(boolean)"
    ]
  },
  "cn.nukkit.entity.passive.EntitySkeletonHorse": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.passive.EntitySkeletonHorse#isUndead()"
    ]
  },
  "cn.nukkit.entity.passive.EntityTurtle": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.passive.EntityTurtle#setBreedingAge(int)",
      "cn.nukkit.entity.passive.EntityTurtle#setHomePos(Vector3)"
    ]
  },
  "cn.nukkit.entity.passive.EntityZombieHorse": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.passive.EntityZombieHorse#isUndead()"
    ]
  },
  "cn.nukkit.entity.projectile.EntityArrow": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.projectile.EntityArrow#addHitEffect()"
    ]
  },
  "cn.nukkit.entity.projectile.EntityEgg": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.projectile.EntityEgg#addHitEffect()"
    ]
  },
  "cn.nukkit.entity.projectile.EntityProjectile": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.projectile.EntityProjectile#inaccurate(float)",
      "cn.nukkit.entity.projectile.EntityProjectile#updateRotation()"
    ]
  },
  "cn.nukkit.entity.projectile.EntitySnowball": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.projectile.EntitySnowball#addHitEffect()"
    ]
  },
  "cn.nukkit.entity.projectile.EntityThrownTrident": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.projectile.EntityThrownTrident#gravity",
      "cn.nukkit.entity.projectile.EntityThrownTrident#drag",
      "cn.nukkit.entity.projectile.EntityThrownTrident#create(Object, Position, Object[])",
      "cn.nukkit.entity.projectile.EntityThrownTrident#isCritical()",
      "cn.nukkit.entity.projectile.EntityThrownTrident#setCritical()",
      "cn.nukkit.entity.projectile.EntityThrownTrident#setCritical(boolean)"
    ]
  },
  "cn.nukkit.event.blockstate.BlockStateRepairFinishEvent": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.event.blockstate.BlockStateRepairFinishEvent#getResult()"
    ]
  },
  "cn.nukkit.event.inventory.EnchantItemEvent": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.event.inventory.EnchantItemEvent#oldItem",
      "cn.nukkit.event.inventory.EnchantItemEvent#newItem",
      "cn.nukkit.event.inventory.EnchantItemEvent#xpCost",
      "cn.nukkit.event.inventory.EnchantItemEvent#enchanter"
    ]
  },
  "cn.nukkit.inventory.CraftingManager": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.inventory.CraftingManager#registerCartographyRecipe(CartographyRecipe)"
    ]
  },
  "cn.nukkit.inventory.Inventory": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.inventory.Inventory#addListener(InventoryListener)",
      "cn.nukkit.inventory.Inventory#removeListener(InventoryListener)"
    ]
  },
  "cn.nukkit.inventory.PlayerUIInventory": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.inventory.PlayerUIInventory#onSlotChangeBase(int, Item, boolean)"
    ]
  },
  "cn.nukkit.inventory.SmokerRecipe": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.inventory.SmokerRecipe#getInput()"
    ]
  },
  "cn.nukkit.inventory.StonecutterInventory": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.inventory.StonecutterInventory#<init>(PlayerUIInventory, Position)"
    ]
  },
  "cn.nukkit.inventory.transaction.CraftingTransaction": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.inventory.transaction.CraftingTransaction#craftingType"
    ]
  },
  "cn.nukkit.inventory.transaction.EnchantTransaction": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.inventory.transaction.EnchantTransaction#inputItem",
      "cn.nukkit.inventory.transaction.EnchantTransaction#outputItem",
      "cn.nukkit.inventory.transaction.EnchantTransaction#cost"
    ]
  },
  "cn.nukkit.inventory.transaction.action.EnchantingAction": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.inventory.transaction.action.EnchantingAction#type"
    ]
  },
  "cn.nukkit.item.Item": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.Item#equalsIgnoringEnchantmentOrder(Item, boolean)",
      "cn.nukkit.item.Item#getBlock(int)",
      "cn.nukkit.item.Item#getBlock(int, Integer)",
      "cn.nukkit.item.Item#getBlock(int, Integer, int)",
      "cn.nukkit.item.Item#getBlock(int, Integer, int, byte[])"
    ]
  },
  "cn.nukkit.item.ItemAxeNetherite": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemAxeNetherite#isLavaResistant()"
    ]
  },
  "cn.nukkit.item.ItemBannerPattern": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemBannerPattern#updateName()"
    ]
  },
  "cn.nukkit.item.ItemBlock": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemBlock#isLavaResistant()"
    ]
  },
  "cn.nukkit.item.ItemBootsNetherite": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemBootsNetherite#isLavaResistant()"
    ]
  },
  "cn.nukkit.item.ItemChestplateNetherite": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemChestplateNetherite#isLavaResistant()"
    ]
  },
  "cn.nukkit.item.ItemEnderPearl": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemEnderPearl#correctProjectile(Player, Entity)"
    ]
  },
  "cn.nukkit.item.ItemFishingRod": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemFishingRod#damageWhenBreaking()"
    ]
  },
  "cn.nukkit.item.ItemHelmetNetherite": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemHelmetNetherite#isLavaResistant()"
    ]
  },
  "cn.nukkit.item.ItemHoeNetherite": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemHoeNetherite#isLavaResistant()"
    ]
  },
  "cn.nukkit.item.ItemIngotNetherite": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemIngotNetherite#isLavaResistant()"
    ]
  },
  "cn.nukkit.item.ItemLeggingsNetherite": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemLeggingsNetherite#isLavaResistant()"
    ]
  },
  "cn.nukkit.item.ItemPickaxeNetherite": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemPickaxeNetherite#isLavaResistant()"
    ]
  },
  "cn.nukkit.item.ItemPotionLingering": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemPotionLingering#correctNBT(CompoundTag)",
      "cn.nukkit.item.ItemPotionLingering#getProjectileEntityType()",
      "cn.nukkit.item.ItemPotionLingering#getThrowForce()"
    ]
  },
  "cn.nukkit.item.ItemScrapNetherite": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemScrapNetherite#isLavaResistant()"
    ]
  },
  "cn.nukkit.item.ItemShovelNetherite": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemShovelNetherite#isLavaResistant()"
    ]
  },
  "cn.nukkit.item.ItemSign": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemSign#<init>(int, Integer, int, String, BlockSignPost)"
    ]
  },
  "cn.nukkit.item.ItemSwordNetherite": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemSwordNetherite#isLavaResistant()"
    ]
  },
  "cn.nukkit.item.ItemTotem": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemTotem#<init>()"
    ]
  },
  "cn.nukkit.item.ItemWarpedFungusOnAStick": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemWarpedFungusOnAStick#damageWhenBreaking()"
    ]
  },
  "cn.nukkit.item.PNAlphaItemID": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.PNAlphaItemID#badItemId",
      "cn.nukkit.item.PNAlphaItemID#minecraftItemId",
      "cn.nukkit.item.PNAlphaItemID#getBadItemId()",
      "cn.nukkit.item.PNAlphaItemID#getMinecraftItemId()"
    ]
  },
  "cn.nukkit.item.ProjectileItem": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ProjectileItem#addThrowSound(Player)",
      "cn.nukkit.item.ProjectileItem#correctProjectile(Player, Entity)"
    ]
  },
  "cn.nukkit.item.RuntimeItemMapping": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.RuntimeItemMapping#getItemDataPalette()",
      "cn.nukkit.item.RuntimeItemMapping#getLegacyFullId(int)",
      "cn.nukkit.item.RuntimeItemMapping#getNetworkFullId(Item)",
      "cn.nukkit.item.RuntimeItemMapping#<init>(byte[], Int2IntMap, Int2IntMap)"
    ]
  },
  "cn.nukkit.item.RuntimeItems": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.RuntimeItems#getData(int)",
      "cn.nukkit.item.RuntimeItems#getFullId(int, int)",
      "cn.nukkit.item.RuntimeItems#getId(int)",
      "cn.nukkit.item.RuntimeItems#getNetworkId(int)",
      "cn.nukkit.item.RuntimeItems#getRuntimeMapping()",
      "cn.nukkit.item.RuntimeItems#hasData(int)"
    ]
  },
  "cn.nukkit.item.enchantment.EnchantmentDurability": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.enchantment.EnchantmentDurability#isItemAcceptable(Item)"
    ]
  },
  "cn.nukkit.item.enchantment.EnchantmentEfficiency": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.enchantment.EnchantmentEfficiency#isItemAcceptable(Item)"
    ]
  },
  "cn.nukkit.item.enchantment.EnchantmentSilkTouch": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.enchantment.EnchantmentSilkTouch#isItemAcceptable(Item)"
    ]
  },
  "cn.nukkit.item.enchantment.EnchantmentThorns": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.enchantment.EnchantmentThorns#isItemAcceptable(Item)"
    ]
  },
  "cn.nukkit.item.enchantment.damage.EnchantmentDamage": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.enchantment.damage.EnchantmentDamage#isItemAcceptable(Item)"
    ]
  },
  "cn.nukkit.item.enchantment.sideeffect.SideEffect": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.enchantment.sideeffect.SideEffect#EMPTY_ARRAY"
    ]
  },
  "cn.nukkit.level.GameRule": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.GameRule#EXPERIMENTAL_GAMEPLAY"
    ]
  },
  "cn.nukkit.level.GlobalBlockPalette": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.GlobalBlockPalette#BLOCK_PALETTE",
      "cn.nukkit.level.GlobalBlockPalette#getName(int)"
    ]
  },
  "cn.nukkit.level.Level": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.Level#addLevelEvent(int, int)",
      "cn.nukkit.level.Level#addLevelEvent(int, int, Vector3)",
      "cn.nukkit.level.Level#addLevelEvent(int, int, float, float, float)",
      "cn.nukkit.level.Level#getBlock(Vector3, int)",
      "cn.nukkit.level.Level#getBlock(Vector3, int, boolean)",
      "cn.nukkit.level.Level#getBlock(int, int, int, int)",
      "cn.nukkit.level.Level#getBlock(int, int, int, int, boolean)",
      "cn.nukkit.level.Level#getBlockDataAt(int, int, int, int)",
      "cn.nukkit.level.Level#getBlockEntity(BlockVector3)",
      "cn.nukkit.level.Level#getBlockIdAt(int, int, int, int)",
      "cn.nukkit.level.Level#getBlockStateAt(int, int, int, int)",
      "cn.nukkit.level.Level#getCelestialAngle(float)",
      "cn.nukkit.level.Level#getCollisionBlocks(AxisAlignedBB, boolean, boolean)",
      "cn.nukkit.level.Level#getCollisionBlocks(AxisAlignedBB, boolean, boolean, Predicate)",
      "cn.nukkit.level.Level#getFullBlock(int, int, int, int)",
      "cn.nukkit.level.Level#getFuzzySpawnLocation()",
      "cn.nukkit.level.Level#getHighestAdjacentBlockSkyLight(int, int, int)",
      "cn.nukkit.level.Level#getRainStrength(float)",
      "cn.nukkit.level.Level#getThunderStrength(float)",
      "cn.nukkit.level.Level#setBlock(Vector3, int, Block)",
      "cn.nukkit.level.Level#setBlock(Vector3, int, Block, boolean)",
      "cn.nukkit.level.Level#setBlock(Vector3, int, Block, boolean, boolean)",
      "cn.nukkit.level.Level#setBlock(int, int, int, int, Block, boolean, boolean)",
      "cn.nukkit.level.Level#setBlockAtLayer(int, int, int, int, int, int)",
      "cn.nukkit.level.Level#setBlockDataAt(int, int, int, int, int)",
      "cn.nukkit.level.Level#setBlockFullIdAt(int, int, int, int, int)",
      "cn.nukkit.level.Level#setBlockIdAt(int, int, int, int, int)",
      "cn.nukkit.level.Level#useBreakOn(Vector3, BlockFace, Item, Player, boolean, boolean)",
      "cn.nukkit.level.Level#useBreakOn(Vector3, int, BlockFace, Item, Player, boolean, boolean)"
    ]
  },
  "cn.nukkit.level.ListChunkManager": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.ListChunkManager#getBlockDataAt(int, int, int, int)",
      "cn.nukkit.level.ListChunkManager#getBlockIdAt(int, int, int, int)",
      "cn.nukkit.level.ListChunkManager#setBlockAtLayer(int, int, int, int, int, int)",
      "cn.nukkit.level.ListChunkManager#setBlockDataAt(int, int, int, int, int)",
      "cn.nukkit.level.ListChunkManager#setBlockFullIdAt(int, int, int, int, int)",
      "cn.nukkit.level.ListChunkManager#setBlockIdAt(int, int, int, int, int)"
    ]
  },
  "cn.nukkit.level.Location": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.Location#setPitch(double)",
      "cn.nukkit.level.Location#setYaw(double)"
    ]
  },
  "cn.nukkit.level.Position": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.Position#getLevelBlockAtLayer(int)"
    ]
  },
  "cn.nukkit.level.biome.impl.beach.ColdBeachBiome": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.biome.impl.beach.ColdBeachBiome#getCoverBlock()"
    ]
  },
  "cn.nukkit.level.biome.impl.extremehills.StoneBeachBiome": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.biome.impl.extremehills.StoneBeachBiome#getGroundBlock(int)",
      "cn.nukkit.level.biome.impl.extremehills.StoneBeachBiome#getGroundDepth(int)",
      "cn.nukkit.level.biome.impl.extremehills.StoneBeachBiome#getSurfaceBlock(int)",
      "cn.nukkit.level.biome.impl.extremehills.StoneBeachBiome#getSurfaceDepth(int)"
    ]
  },
  "cn.nukkit.level.biome.impl.iceplains.IcePlainsSpikesBiome": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.biome.impl.iceplains.IcePlainsSpikesBiome#getSurfaceBlock(int)"
    ]
  },
  "cn.nukkit.level.biome.impl.mesa.MesaPlateauFBiome": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.biome.impl.mesa.MesaPlateauFBiome#getCoverBlock()"
    ]
  },
  "cn.nukkit.level.biome.impl.mushroom.MushroomIslandBiome": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.biome.impl.mushroom.MushroomIslandBiome#getSurfaceBlock(int)"
    ]
  },
  "cn.nukkit.level.biome.impl.taiga.ColdTaigaBiome": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.biome.impl.taiga.ColdTaigaBiome#getCoverBlock()"
    ]
  },
  "cn.nukkit.level.biome.type.CoveredBiome": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.biome.type.CoveredBiome#synchronizeCover",
      "cn.nukkit.level.biome.type.CoveredBiome#getCoverBlock()",
      "cn.nukkit.level.biome.type.CoveredBiome#getGroundDepth(int)",
      "cn.nukkit.level.biome.type.CoveredBiome#getGroundMeta(int)",
      "cn.nukkit.level.biome.type.CoveredBiome#getStoneBlock()",
      "cn.nukkit.level.biome.type.CoveredBiome#getSurfaceBlock(int)",
      "cn.nukkit.level.biome.type.CoveredBiome#getSurfaceDepth(int)",
      "cn.nukkit.level.biome.type.CoveredBiome#getSurfaceMeta(int)",
      "cn.nukkit.level.biome.type.CoveredBiome#preCover(int, int)"
    ]
  },
  "cn.nukkit.level.biome.type.GrassyBiome": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.biome.type.GrassyBiome#getGroundBlock(int)",
      "cn.nukkit.level.biome.type.GrassyBiome#getSurfaceBlock(int)"
    ]
  },
  "cn.nukkit.level.biome.type.SandyBiome": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.biome.type.SandyBiome#getGroundBlock(int)",
      "cn.nukkit.level.biome.type.SandyBiome#getGroundDepth(int)",
      "cn.nukkit.level.biome.type.SandyBiome#getSurfaceBlock(int)",
      "cn.nukkit.level.biome.type.SandyBiome#getSurfaceDepth(int)"
    ]
  },
  "cn.nukkit.level.biome.type.SnowyBiome": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.biome.type.SnowyBiome#getCoverBlock()"
    ]
  },
  "cn.nukkit.level.biome.type.WateryBiome": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.biome.type.WateryBiome#getGroundDepth(int)",
      "cn.nukkit.level.biome.type.WateryBiome#getSurfaceBlock(int)",
      "cn.nukkit.level.biome.type.WateryBiome#getSurfaceDepth(int)"
    ]
  },
  "cn.nukkit.level.format.ChunkSection": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.ChunkSection#setFullBlockId(int, int, int, int, int)"
    ]
  },
  "cn.nukkit.level.format.FullChunk": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.FullChunk#recalculateHeightMapColumn(int, int)"
    ]
  },
  "cn.nukkit.level.format.LevelProvider": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.LevelProvider#getMaximumLayer()"
    ]
  },
  "cn.nukkit.level.format.anvil.Anvil": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.anvil.Anvil#getMaximumLayer()"
    ]
  },
  "cn.nukkit.level.format.anvil.ChunkSection": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.anvil.ChunkSection#STREAM_STORAGE_VERSION",
      "cn.nukkit.level.format.anvil.ChunkSection#SAVE_STORAGE_VERSION",
      "cn.nukkit.level.format.anvil.ChunkSection#getAndSetBlock(int, int, int, int, Block)",
      "cn.nukkit.level.format.anvil.ChunkSection#getBlockChangeStateAbove(int, int, int)",
      "cn.nukkit.level.format.anvil.ChunkSection#getBlockData(int, int, int, int)",
      "cn.nukkit.level.format.anvil.ChunkSection#getBlockId(int, int, int, int)",
      "cn.nukkit.level.format.anvil.ChunkSection#getBlockState(int, int, int, int)",
      "cn.nukkit.level.format.anvil.ChunkSection#getFullBlock(int, int, int, int)",
      "cn.nukkit.level.format.anvil.ChunkSection#getMaximumLayer()",
      "cn.nukkit.level.format.anvil.ChunkSection#hasBlocks()",
      "cn.nukkit.level.format.anvil.ChunkSection#setBlockAtLayer(int, int, int, int, int)",
      "cn.nukkit.level.format.anvil.ChunkSection#setBlockAtLayer(int, int, int, int, int, int)",
      "cn.nukkit.level.format.anvil.ChunkSection#setBlockData(int, int, int, int, int)",
      "cn.nukkit.level.format.anvil.ChunkSection#setBlockId(int, int, int, int, int)",
      "cn.nukkit.level.format.anvil.ChunkSection#setBlockStateAtLayer(int, int, int, int, BlockState)",
      "cn.nukkit.level.format.anvil.ChunkSection#setFullBlockId(int, int, int, int, int)",
      "cn.nukkit.level.format.anvil.ChunkSection#toNBT()"
    ]
  },
  "cn.nukkit.level.format.anvil.util.BlockStorage": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.anvil.util.BlockStorage#SECTION_SIZE",
      "cn.nukkit.level.format.anvil.util.BlockStorage#hasBlockDataExtras()",
      "cn.nukkit.level.format.anvil.util.BlockStorage#hasBlockIdExtras()",
      "cn.nukkit.level.format.anvil.util.BlockStorage#hasBlockIds()"
    ]
  },
  "cn.nukkit.level.format.anvil.util.ImmutableBlockStorage": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.anvil.util.ImmutableBlockStorage#setBlockState(int, BlockState)"
    ]
  },
  "cn.nukkit.level.format.generic.BaseChunk": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.generic.BaseChunk#findBorders(int, int)",
      "cn.nukkit.level.format.generic.BaseChunk#getBlockData(int, int, int, int)",
      "cn.nukkit.level.format.generic.BaseChunk#getBlockStateAt(int, int, int, int)",
      "cn.nukkit.level.format.generic.BaseChunk#isBlockChangeAllowed(int, int, int)",
      "cn.nukkit.level.format.generic.BaseChunk#isBlockedByBorder(int, int)",
      "cn.nukkit.level.format.generic.BaseChunk#setBlockData(int, int, int, int, int)"
    ]
  },
  "cn.nukkit.level.format.generic.BaseFullChunk": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.generic.BaseFullChunk#getBlockDataAt(int, int, int, int)",
      "cn.nukkit.level.format.generic.BaseFullChunk#getBlockIdAt(int, int, int, int)",
      "cn.nukkit.level.format.generic.BaseFullChunk#recalculateHeightMapColumn(int, int)",
      "cn.nukkit.level.format.generic.BaseFullChunk#setBlockAtLayer(int, int, int, int, int)",
      "cn.nukkit.level.format.generic.BaseFullChunk#setBlockAtLayer(int, int, int, int, int, int)",
      "cn.nukkit.level.format.generic.BaseFullChunk#setBlockDataAt(int, int, int, int, int)",
      "cn.nukkit.level.format.generic.BaseFullChunk#setBlockFullIdAt(int, int, int, int, int)",
      "cn.nukkit.level.format.generic.BaseFullChunk#setBlockIdAt(int, int, int, int, int)"
    ]
  },
  "cn.nukkit.level.format.generic.EmptyChunkSection": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.generic.EmptyChunkSection#getAndSetBlock(int, int, int, int, Block)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#getBlockChangeStateAbove(int, int, int)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#getBlockData(int, int, int, int)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#getBlockId(int, int, int, int)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#getBlockState(int, int, int, int)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#getFullBlock(int, int, int, int)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#getMaximumLayer()",
      "cn.nukkit.level.format.generic.EmptyChunkSection#setBlockAtLayer(int, int, int, int, int)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#setBlockAtLayer(int, int, int, int, int, int)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#setBlockData(int, int, int, int, int)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#setBlockId(int, int, int, int, int)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#setBlockStateAtLayer(int, int, int, int, BlockState)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#setFullBlockId(int, int, int, int, int)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#toNBT()"
    ]
  },
  "cn.nukkit.level.format.updater.BeehiveUpdater": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.updater.BeehiveUpdater#update(int, int, int, int, int, int, BlockState)"
    ]
  },
  "cn.nukkit.level.format.updater.DoorUpdater": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.updater.DoorUpdater#update(int, int, int, int, int, int, BlockState)"
    ]
  },
  "cn.nukkit.level.format.updater.FrameUpdater": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.updater.FrameUpdater#update(int, int, int, int, int, int, BlockState)"
    ]
  },
  "cn.nukkit.level.format.updater.GroupedUpdaters": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.updater.GroupedUpdaters#update(int, int, int, int, int, int, BlockState)"
    ]
  },
  "cn.nukkit.level.format.updater.MesaBiomeUpdater": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.updater.MesaBiomeUpdater#update(int, int, int, int, int, int, BlockState)"
    ]
  },
  "cn.nukkit.level.format.updater.NewLeafUpdater": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.updater.NewLeafUpdater#update(int, int, int, int, int, int, BlockState)"
    ]
  },
  "cn.nukkit.level.format.updater.OldWoodBarkUpdater": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.updater.OldWoodBarkUpdater#update(int, int, int, int, int, int, BlockState)"
    ]
  },
  "cn.nukkit.level.format.updater.SnowLayerUpdater": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.updater.SnowLayerUpdater#update(int, int, int, int, int, int, BlockState)"
    ]
  },
  "cn.nukkit.level.format.updater.StemStrippedUpdater": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.updater.StemStrippedUpdater#update(int, int, int, int, int, int, BlockState)"
    ]
  },
  "cn.nukkit.level.format.updater.StemUpdater": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.updater.StemUpdater#update(int, int, int, int, int, int, BlockState)"
    ]
  },
  "cn.nukkit.level.format.updater.WallUpdater": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.updater.WallUpdater#update(int, int, int, int, int, int, BlockState)"
    ]
  },
  "cn.nukkit.level.generator.SimpleChunkManager": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.generator.SimpleChunkManager#getBlockDataAt(int, int, int, int)",
      "cn.nukkit.level.generator.SimpleChunkManager#getBlockIdAt(int, int, int, int)",
      "cn.nukkit.level.generator.SimpleChunkManager#getBlockStateAt(int, int, int, int)",
      "cn.nukkit.level.generator.SimpleChunkManager#setBlockAtLayer(int, int, int, int, int, int)",
      "cn.nukkit.level.generator.SimpleChunkManager#setBlockDataAt(int, int, int, int, int)",
      "cn.nukkit.level.generator.SimpleChunkManager#setBlockFullIdAt(int, int, int, int, int)",
      "cn.nukkit.level.generator.SimpleChunkManager#setBlockIdAt(int, int, int, int, int)"
    ]
  },
  "cn.nukkit.level.generator.object.ObjectNyliumVegetation": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.generator.object.ObjectNyliumVegetation#<init>()"
    ]
  },
  "cn.nukkit.level.generator.object.ObjectTallGrass": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.generator.object.ObjectTallGrass#growGrass(ChunkManager, Vector3, NukkitRandom, int, int)"
    ]
  },
  "cn.nukkit.level.generator.populator.impl.PopulatorGroundCover": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.generator.populator.impl.PopulatorGroundCover#STONE"
    ]
  },
  "cn.nukkit.level.generator.populator.impl.PopulatorOre": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.generator.populator.impl.PopulatorOre#setOreTypes(OreType[])",
      "cn.nukkit.level.generator.populator.impl.PopulatorOre#<init>()",
      "cn.nukkit.level.generator.populator.impl.PopulatorOre#<init>(int)"
    ]
  },
  "cn.nukkit.level.generator.populator.impl.PopulatorOreEmerald": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.generator.populator.impl.PopulatorOreEmerald#<init>()"
    ]
  },
  "cn.nukkit.math.AxisAlignedBB": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.math.AxisAlignedBB#getOffsetBoundingBox(BlockFace, double, double, double)"
    ]
  },
  "cn.nukkit.math.MathHelper": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.math.MathHelper#clamp(float, float, float)"
    ]
  },
  "cn.nukkit.nbt.tag.CompoundTag": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.nbt.tag.CompoundTag#<init>(String, Map)",
      "cn.nukkit.nbt.tag.CompoundTag#<init>(Map)"
    ]
  },
  "cn.nukkit.network.Network": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.network.Network#getPacket(byte)"
    ]
  },
  "cn.nukkit.network.protocol.AbstractResourcePackDataPacket": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.network.protocol.AbstractResourcePackDataPacket#<init>()"
    ]
  },
  "cn.nukkit.network.protocol.AnimateEntityPacket": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.network.protocol.AnimateEntityPacket#<init>()"
    ]
  },
  "cn.nukkit.network.protocol.DataPacket": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.network.protocol.DataPacket#EMPTY_ARRAY"
    ]
  },
  "cn.nukkit.network.protocol.ItemComponentPacket": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.network.protocol.ItemComponentPacket#<init>()"
    ]
  },
  "cn.nukkit.network.protocol.ItemStackResponsePacket": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.network.protocol.ItemStackResponsePacket#<init>()"
    ]
  },
  "cn.nukkit.network.protocol.PlayerActionPacket": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.network.protocol.PlayerActionPacket#ACTION_INTERACT_BLOCK"
    ]
  },
  "cn.nukkit.network.protocol.PositionTrackingDBClientRequestPacket": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.network.protocol.PositionTrackingDBClientRequestPacket#<init>()"
    ]
  },
  "cn.nukkit.network.protocol.PositionTrackingDBServerBroadcastPacket": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.network.protocol.PositionTrackingDBServerBroadcastPacket#<init>()"
    ]
  },
  "cn.nukkit.network.protocol.TickSyncPacket": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.network.protocol.TickSyncPacket#<init>()"
    ]
  },
  "cn.nukkit.plugin.PowerNukkitPlugin": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.plugin.PowerNukkitPlugin#<init>()"
    ]
  },
  "cn.nukkit.positiontracking.NamedPosition": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.positiontracking.NamedPosition#matchesNamedPosition(NamedPosition)"
    ]
  },
  "cn.nukkit.potion.Potion": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.potion.Potion#SLOWNESS_IV"
    ]
  },
  "cn.nukkit.utils.Hash": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.utils.Hash#hashBlock(Vector3)"
    ]
  },
  "cn.nukkit.utils.HumanStringComparator": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.utils.HumanStringComparator#<init>()"
    ]
  }
}