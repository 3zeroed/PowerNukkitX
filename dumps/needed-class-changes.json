{
  "cn.nukkit.block.BlockBell": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockBell#getAttachmentType()",
      "cn.nukkit.block.BlockBell#setAttachmentType(int)"
    ]
  },
  "cn.nukkit.block.BlockCarpet": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockCarpet#getProperties()"
    ]
  },
  "cn.nukkit.block.BlockCarvedPumpkin": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockCarvedPumpkin#<init>()"
    ]
  },
  "cn.nukkit.block.BlockCauldron": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockCauldron#getFillLevel()",
      "cn.nukkit.block.BlockCauldron#setFillLevel(int)"
    ]
  },
  "cn.nukkit.block.BlockCauldronLava": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockCauldronLava#setFillLevel(int)"
    ]
  },
  "cn.nukkit.block.BlockCocoa": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockCocoa#getGrowthStage()",
      "cn.nukkit.block.BlockCocoa#grow()"
    ]
  },
  "cn.nukkit.block.BlockConcretePowder": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockConcretePowder#getDyeColor()"
    ]
  },
  "cn.nukkit.block.BlockCoralFanDead": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockCoralFanDead#isDead()"
    ]
  },
  "cn.nukkit.block.BlockCoralFanHang": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockCoralFanHang#getRootsFace()",
      "cn.nukkit.block.BlockCoralFanHang#getType()",
      "cn.nukkit.block.BlockCoralFanHang#isDead()"
    ]
  },
  "cn.nukkit.block.BlockCoralFanHang2": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockCoralFanHang2#getType()"
    ]
  },
  "cn.nukkit.block.BlockCoralFanHang3": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockCoralFanHang3#getType()"
    ]
  },
  "cn.nukkit.block.BlockDaylightDetector": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockDaylightDetector#isInverted()",
      "cn.nukkit.block.BlockDaylightDetector#updatePower()"
    ]
  },
  "cn.nukkit.block.BlockDaylightDetectorInverted": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockDaylightDetectorInverted#isInverted()"
    ]
  },
  "cn.nukkit.block.BlockDispenser": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockDispenser#dispense()",
      "cn.nukkit.block.BlockDispenser#getDispenseBehavior(Item)"
    ]
  },
  "cn.nukkit.block.BlockDoor": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockDoor#PROPERTIES"
    ]
  },
  "cn.nukkit.block.BlockDoubleSlabBlackstone": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockDoubleSlabBlackstone#getSingleSlabId()",
      "cn.nukkit.block.BlockDoubleSlabBlackstone#getSlabName()"
    ]
  },
  "cn.nukkit.block.BlockDoubleSlabBlackstonePolished": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockDoubleSlabBlackstonePolished#getSingleSlabId()",
      "cn.nukkit.block.BlockDoubleSlabBlackstonePolished#getSlabName()"
    ]
  },
  "cn.nukkit.block.BlockDoubleSlabBrickBlackstonePolished": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockDoubleSlabBrickBlackstonePolished#getSingleSlabId()",
      "cn.nukkit.block.BlockDoubleSlabBrickBlackstonePolished#getSlabName()"
    ]
  },
  "cn.nukkit.block.BlockDoubleSlabCrimson": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockDoubleSlabCrimson#getSingleSlabId()",
      "cn.nukkit.block.BlockDoubleSlabCrimson#getSlabName()",
      "cn.nukkit.block.BlockDoubleSlabCrimson#isCorrectTool(Item)"
    ]
  },
  "cn.nukkit.block.BlockDoubleSlabRedSandstone": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockDoubleSlabRedSandstone#getSingleSlabId()",
      "cn.nukkit.block.BlockDoubleSlabRedSandstone#getSlabName()"
    ]
  },
  "cn.nukkit.block.BlockDoubleSlabStone": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockDoubleSlabStone#getSingleSlabId()",
      "cn.nukkit.block.BlockDoubleSlabStone#getSlabName()"
    ]
  },
  "cn.nukkit.block.BlockDoubleSlabStone3": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockDoubleSlabStone3#getSingleSlabId()",
      "cn.nukkit.block.BlockDoubleSlabStone3#getSlabName()"
    ]
  },
  "cn.nukkit.block.BlockDoubleSlabStone4": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockDoubleSlabStone4#getSingleSlabId()",
      "cn.nukkit.block.BlockDoubleSlabStone4#getSlabName()"
    ]
  },
  "cn.nukkit.block.BlockDoubleSlabWarped": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockDoubleSlabWarped#getSingleSlabId()",
      "cn.nukkit.block.BlockDoubleSlabWarped#getSlabName()",
      "cn.nukkit.block.BlockDoubleSlabWarped#isCorrectTool(Item)"
    ]
  },
  "cn.nukkit.block.BlockDoubleSlabWood": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockDoubleSlabWood#getSingleSlabId()",
      "cn.nukkit.block.BlockDoubleSlabWood#getSlabName()",
      "cn.nukkit.block.BlockDoubleSlabWood#isCorrectTool(Item)"
    ]
  },
  "cn.nukkit.block.BlockDropper": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockDropper#dispense()",
      "cn.nukkit.block.BlockDropper#getDispenseBehavior(Item)"
    ]
  },
  "cn.nukkit.block.BlockEnderChest": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockEnderChest#getBlockEntity()"
    ]
  },
  "cn.nukkit.block.BlockFallable": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockFallable#createFallingEntity(CompoundTag)"
    ]
  },
  "cn.nukkit.block.BlockFence": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockFence#PROPERTIES"
    ]
  },
  "cn.nukkit.block.BlockFenceBase": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockFenceBase#getWoodType()",
      "cn.nukkit.block.BlockFenceBase#setWoodType(WoodType)"
    ]
  },
  "cn.nukkit.block.BlockFlower": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockFlower#canPlantOn(Block)"
    ]
  },
  "cn.nukkit.block.BlockFungusCrimson": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockFungusCrimson#canGrowOn(Block)",
      "cn.nukkit.block.BlockFungusCrimson#grow(Player)"
    ]
  },
  "cn.nukkit.block.BlockFungusWarped": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockFungusWarped#canGrowOn(Block)",
      "cn.nukkit.block.BlockFungusWarped#grow(Player)"
    ]
  },
  "cn.nukkit.block.BlockHoney": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockHoney#<init>()"
    ]
  },
  "cn.nukkit.block.BlockHyphaeCrimson": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockHyphaeCrimson#getStrippedState()"
    ]
  },
  "cn.nukkit.block.BlockHyphaeWarped": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockHyphaeWarped#getStrippedState()"
    ]
  },
  "cn.nukkit.block.BlockLeaves2": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockLeaves2#getType()",
      "cn.nukkit.block.BlockLeaves2#setType(WoodType)"
    ]
  },
  "cn.nukkit.block.BlockLectern": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockLectern#executeRedstonePulse()"
    ]
  },
  "cn.nukkit.block.BlockLiquid": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockLiquid#usesWaterLogging()"
    ]
  },
  "cn.nukkit.block.BlockPiston": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockPiston#getPistonHeadBlockId()"
    ]
  },
  "cn.nukkit.block.BlockPistonBase": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockPistonBase#canPush(Block, BlockFace, boolean, boolean)",
      "cn.nukkit.block.BlockPistonBase#createHead(int)",
      "cn.nukkit.block.BlockPistonBase#getPistonHeadBlockId()"
    ]
  },
  "cn.nukkit.block.BlockPistonHead": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockPistonHead#getBlockFace()"
    ]
  },
  "cn.nukkit.block.BlockPistonSticky": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockPistonSticky#getPistonHeadBlockId()"
    ]
  },
  "cn.nukkit.block.BlockPumpkin": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockPumpkin#getProperties()",
      "cn.nukkit.block.BlockPumpkin#setBlockFace(BlockFace)"
    ]
  },
  "cn.nukkit.block.BlockRedstoneDiode": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockRedstoneDiode#isSupportValid(Block)"
    ]
  },
  "cn.nukkit.block.BlockRedstoneWire": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockRedstoneWire#canBePlacedOn(Block)"
    ]
  },
  "cn.nukkit.block.BlockRespawnAnchor": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockRespawnAnchor#<init>()"
    ]
  },
  "cn.nukkit.block.BlockSandstone": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockSandstone#getSandstoneType()"
    ]
  },
  "cn.nukkit.block.BlockScaffolding": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockScaffolding#createFallingEntity(CompoundTag)"
    ]
  },
  "cn.nukkit.block.BlockSlabBlackstone": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockSlabBlackstone#getSlabName()",
      "cn.nukkit.block.BlockSlabBlackstone#isSameType(BlockSlab)"
    ]
  },
  "cn.nukkit.block.BlockSlabBlackstonePolished": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockSlabBlackstonePolished#getSlabName()",
      "cn.nukkit.block.BlockSlabBlackstonePolished#isSameType(BlockSlab)"
    ]
  },
  "cn.nukkit.block.BlockSlabBrickBlackstonePolished": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockSlabBrickBlackstonePolished#getSlabName()"
    ]
  },
  "cn.nukkit.block.BlockSlabCrimson": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockSlabCrimson#getSlabName()",
      "cn.nukkit.block.BlockSlabCrimson#isSameType(BlockSlab)"
    ]
  },
  "cn.nukkit.block.BlockSlabRedSandstone": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockSlabRedSandstone#PRISMARINE",
      "cn.nukkit.block.BlockSlabRedSandstone#PRISMARINE_BRICKS",
      "cn.nukkit.block.BlockSlabRedSandstone#DARK_PRISMARINE",
      "cn.nukkit.block.BlockSlabRedSandstone#MOSSY_COBBLESTONE",
      "cn.nukkit.block.BlockSlabRedSandstone#SMOOTH_SANDSTONE",
      "cn.nukkit.block.BlockSlabRedSandstone#RED_NETHER_BRICK",
      "cn.nukkit.block.BlockSlabRedSandstone#getSlabName()",
      "cn.nukkit.block.BlockSlabRedSandstone#isSameType(BlockSlab)"
    ]
  },
  "cn.nukkit.block.BlockSlabStone": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockSlabStone#getSlabName()",
      "cn.nukkit.block.BlockSlabStone#isSameType(BlockSlab)"
    ]
  },
  "cn.nukkit.block.BlockSlabStone3": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockSlabStone3#getSlabName()",
      "cn.nukkit.block.BlockSlabStone3#isSameType(BlockSlab)"
    ]
  },
  "cn.nukkit.block.BlockSlabStone4": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockSlabStone4#getSlabName()",
      "cn.nukkit.block.BlockSlabStone4#isSameType(BlockSlab)"
    ]
  },
  "cn.nukkit.block.BlockSlabWarped": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockSlabWarped#getSlabName()",
      "cn.nukkit.block.BlockSlabWarped#isSameType(BlockSlab)"
    ]
  },
  "cn.nukkit.block.BlockSlabWood": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockSlabWood#getSlabName()",
      "cn.nukkit.block.BlockSlabWood#isSameType(BlockSlab)"
    ]
  },
  "cn.nukkit.block.BlockSoulSand": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockSoulSand#isSoulSpeedCompatible()"
    ]
  },
  "cn.nukkit.block.BlockSoulSoil": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockSoulSoil#isSoulSpeedCompatible()"
    ]
  },
  "cn.nukkit.block.BlockSoulTorch": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockSoulTorch#<init>(int)"
    ]
  },
  "cn.nukkit.block.BlockStemCrimson": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockStemCrimson#getStrippedState()"
    ]
  },
  "cn.nukkit.block.BlockStemStripped": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockStemStripped#getStrippedState()"
    ]
  },
  "cn.nukkit.block.BlockStemWarped": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockStemWarped#getStrippedState()"
    ]
  },
  "cn.nukkit.block.BlockWallBanner": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockWallBanner#getDirection()",
      "cn.nukkit.block.BlockWallBanner#setDirection(CompassRoseDirection)"
    ]
  },
  "cn.nukkit.block.BlockWallBase": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockWallBase#canConnect(Block)"
    ]
  },
  "cn.nukkit.block.BlockWallSign": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockWallSign#getSignDirection()",
      "cn.nukkit.block.BlockWallSign#getWallId()",
      "cn.nukkit.block.BlockWallSign#setSignDirection(CompassRoseDirection)"
    ]
  },
  "cn.nukkit.block.BlockWater": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockWater#usesWaterLogging()"
    ]
  },
  "cn.nukkit.block.BlockWitherRose": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockWitherRose#canPlantOn(Block)"
    ]
  },
  "cn.nukkit.block.BlockWood": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockWood#getStrippedState()"
    ]
  },
  "cn.nukkit.block.BlockWood2": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockWood2#getWoodType()",
      "cn.nukkit.block.BlockWood2#setWoodType(WoodType)"
    ]
  },
  "cn.nukkit.block.BlockWoodBark": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockWoodBark#getWoodType()",
      "cn.nukkit.block.BlockWoodBark#setWoodType(WoodType)"
    ]
  },
  "cn.nukkit.block.BlockWoodStripped": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockWoodStripped#getStrippedState()",
      "cn.nukkit.block.BlockWoodStripped#setWoodType(WoodType)"
    ]
  },
  "cn.nukkit.block.BlockWoodStrippedAcacia": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockWoodStrippedAcacia#getWoodType()"
    ]
  },
  "cn.nukkit.block.BlockWoodStrippedBirch": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockWoodStrippedBirch#getWoodType()"
    ]
  },
  "cn.nukkit.block.BlockWoodStrippedDarkOak": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockWoodStrippedDarkOak#getWoodType()"
    ]
  },
  "cn.nukkit.block.BlockWoodStrippedJungle": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockWoodStrippedJungle#getWoodType()"
    ]
  },
  "cn.nukkit.block.BlockWoodStrippedOak": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockWoodStrippedOak#getWoodType()"
    ]
  },
  "cn.nukkit.block.BlockWoodStrippedSpruce": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.block.BlockWoodStrippedSpruce#getWoodType()"
    ]
  },
  "cn.nukkit.blockentity.BlockEntity": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.blockentity.BlockEntity#createBlockEntity(String, Position, CompoundTag, Object[])",
      "cn.nukkit.blockentity.BlockEntity#createBlockEntity(String, Position, Object[])",
      "cn.nukkit.blockentity.BlockEntity#getLevelBlockEntity()",
      "cn.nukkit.blockentity.BlockEntity#onBreak(boolean)"
    ]
  },
  "cn.nukkit.blockentity.BlockEntityBeehive": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.blockentity.BlockEntityBeehive#onBreak(boolean)"
    ]
  },
  "cn.nukkit.blockentity.BlockEntityBlastFurnace": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.blockentity.BlockEntityBlastFurnace#getBurningBlockId()",
      "cn.nukkit.blockentity.BlockEntityBlastFurnace#getClientName()",
      "cn.nukkit.blockentity.BlockEntityBlastFurnace#getFurnaceName()",
      "cn.nukkit.blockentity.BlockEntityBlastFurnace#getIdleBlockId()",
      "cn.nukkit.blockentity.BlockEntityBlastFurnace#getInventoryType()",
      "cn.nukkit.blockentity.BlockEntityBlastFurnace#getSpeedMultiplier()",
      "cn.nukkit.blockentity.BlockEntityBlastFurnace#matchRecipe(Item)"
    ]
  },
  "cn.nukkit.blockentity.BlockEntityCauldron": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.blockentity.BlockEntityCauldron#POTION_TYPE_EMPTY",
      "cn.nukkit.blockentity.BlockEntityCauldron#POTION_TYPE_NORMAL",
      "cn.nukkit.blockentity.BlockEntityCauldron#POTION_TYPE_SPLASH",
      "cn.nukkit.blockentity.BlockEntityCauldron#POTION_TYPE_LINGERING",
      "cn.nukkit.blockentity.BlockEntityCauldron#POTION_TYPE_LAVA",
      "cn.nukkit.blockentity.BlockEntityCauldron#getPotionType()",
      "cn.nukkit.blockentity.BlockEntityCauldron#setPotionType(int)"
    ]
  },
  "cn.nukkit.blockentity.BlockEntityDispenser": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.blockentity.BlockEntityDispenser#createInventory()",
      "cn.nukkit.blockentity.BlockEntityDispenser#getBlockEntityName()"
    ]
  },
  "cn.nukkit.blockentity.BlockEntityDropper": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.blockentity.BlockEntityDropper#createInventory()",
      "cn.nukkit.blockentity.BlockEntityDropper#getBlockEntityName()"
    ]
  },
  "cn.nukkit.blockentity.BlockEntityFurnace": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.blockentity.BlockEntityFurnace#getBurningBlockId()",
      "cn.nukkit.blockentity.BlockEntityFurnace#getClientName()",
      "cn.nukkit.blockentity.BlockEntityFurnace#getFurnaceName()",
      "cn.nukkit.blockentity.BlockEntityFurnace#getIdleBlockId()",
      "cn.nukkit.blockentity.BlockEntityFurnace#getInventoryType()",
      "cn.nukkit.blockentity.BlockEntityFurnace#getSpeedMultiplier()",
      "cn.nukkit.blockentity.BlockEntityFurnace#matchRecipe(Item)",
      "cn.nukkit.blockentity.BlockEntityFurnace#setBurning(boolean)"
    ]
  },
  "cn.nukkit.blockentity.BlockEntityMovingBlock": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.blockentity.BlockEntityMovingBlock#blockString",
      "cn.nukkit.blockentity.BlockEntityMovingBlock#getBlockEntity()",
      "cn.nukkit.blockentity.BlockEntityMovingBlock#getMovingBlock()",
      "cn.nukkit.blockentity.BlockEntityMovingBlock#getMovingBlockString()",
      "cn.nukkit.blockentity.BlockEntityMovingBlock#moveCollidedEntities(BlockEntityPistonArm, BlockFace)"
    ]
  },
  "cn.nukkit.blockentity.BlockEntityPistonArm": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.blockentity.BlockEntityPistonArm#MOVE_STEP",
      "cn.nukkit.blockentity.BlockEntityPistonArm#attachedBlocks",
      "cn.nukkit.blockentity.BlockEntityPistonArm#move(boolean, List)"
    ]
  },
  "cn.nukkit.blockentity.BlockEntitySmoker": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.blockentity.BlockEntitySmoker#getBurningBlockId()",
      "cn.nukkit.blockentity.BlockEntitySmoker#getClientName()",
      "cn.nukkit.blockentity.BlockEntitySmoker#getFurnaceName()",
      "cn.nukkit.blockentity.BlockEntitySmoker#getIdleBlockId()",
      "cn.nukkit.blockentity.BlockEntitySmoker#getInventoryType()",
      "cn.nukkit.blockentity.BlockEntitySmoker#getSpeedMultiplier()",
      "cn.nukkit.blockentity.BlockEntitySmoker#matchRecipe(Item)"
    ]
  },
  "cn.nukkit.blockentity.BlockEntitySpawnable": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.blockentity.BlockEntitySpawnable#getSpawnPacket()",
      "cn.nukkit.blockentity.BlockEntitySpawnable#getSpawnPacket(CompoundTag)"
    ]
  },
  "cn.nukkit.blockproperty.ArrayBlockProperty": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.blockproperty.ArrayBlockProperty#getIntValueForMeta(int)",
      "cn.nukkit.blockproperty.ArrayBlockProperty#getMetaForValue(E)",
      "cn.nukkit.blockproperty.ArrayBlockProperty#getPersistenceValueForMeta(int)",
      "cn.nukkit.blockproperty.ArrayBlockProperty#getUniverse()",
      "cn.nukkit.blockproperty.ArrayBlockProperty#getValueClass()",
      "cn.nukkit.blockproperty.ArrayBlockProperty#getValueForMeta(int)",
      "cn.nukkit.blockproperty.ArrayBlockProperty#validateDirectly(E)",
      "cn.nukkit.blockproperty.ArrayBlockProperty#validateMetaDirectly(int)"
    ]
  },
  "cn.nukkit.blockproperty.BlockProperties": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.blockproperty.BlockProperties#getPersistenceValue(int, String)",
      "cn.nukkit.blockproperty.BlockProperties#getPersistenceValue(BigInteger, String)",
      "cn.nukkit.blockproperty.BlockProperties#getPersistenceValue(long, String)"
    ]
  },
  "cn.nukkit.blockproperty.BooleanBlockProperty": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.blockproperty.BooleanBlockProperty#getIntValue(int, int)",
      "cn.nukkit.blockproperty.BooleanBlockProperty#getIntValueForMeta(int)",
      "cn.nukkit.blockproperty.BooleanBlockProperty#getMetaForValue(Boolean)",
      "cn.nukkit.blockproperty.BooleanBlockProperty#getPersistenceValueForMeta(int)",
      "cn.nukkit.blockproperty.BooleanBlockProperty#getValue(int, int)",
      "cn.nukkit.blockproperty.BooleanBlockProperty#getValue(long, int)",
      "cn.nukkit.blockproperty.BooleanBlockProperty#getValueClass()",
      "cn.nukkit.blockproperty.BooleanBlockProperty#getValueForMeta(int)",
      "cn.nukkit.blockproperty.BooleanBlockProperty#setValue(int, int, Boolean)",
      "cn.nukkit.blockproperty.BooleanBlockProperty#setValue(long, int, Boolean)",
      "cn.nukkit.blockproperty.BooleanBlockProperty#validateMetaDirectly(int)"
    ]
  },
  "cn.nukkit.blockproperty.IntBlockProperty": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.blockproperty.IntBlockProperty#getIntValueForMeta(int)",
      "cn.nukkit.blockproperty.IntBlockProperty#getMetaForValue(Integer)",
      "cn.nukkit.blockproperty.IntBlockProperty#getPersistenceValueForMeta(int)",
      "cn.nukkit.blockproperty.IntBlockProperty#getValueClass()",
      "cn.nukkit.blockproperty.IntBlockProperty#getValueForMeta(int)",
      "cn.nukkit.blockproperty.IntBlockProperty#validateDirectly(Integer)",
      "cn.nukkit.blockproperty.IntBlockProperty#validateMetaDirectly(int)"
    ]
  },
  "cn.nukkit.blockproperty.UnsignedIntBlockProperty": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.blockproperty.UnsignedIntBlockProperty#getIntValueForMeta(int)",
      "cn.nukkit.blockproperty.UnsignedIntBlockProperty#getMetaForValue(Integer)",
      "cn.nukkit.blockproperty.UnsignedIntBlockProperty#getPersistenceValueForMeta(int)",
      "cn.nukkit.blockproperty.UnsignedIntBlockProperty#getValueClass()",
      "cn.nukkit.blockproperty.UnsignedIntBlockProperty#getValueForMeta(int)",
      "cn.nukkit.blockproperty.UnsignedIntBlockProperty#validateDirectly(Integer)",
      "cn.nukkit.blockproperty.UnsignedIntBlockProperty#validateMetaDirectly(int)"
    ]
  },
  "cn.nukkit.blockstate.BigIntegerMutableBlockState": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.blockstate.BigIntegerMutableBlockState",
      "cn.nukkit.blockstate.BigIntegerMutableBlockState#copy()",
      "cn.nukkit.blockstate.BigIntegerMutableBlockState#getBigDamage()",
      "cn.nukkit.blockstate.BigIntegerMutableBlockState#getBooleanValue(String)",
      "cn.nukkit.blockstate.BigIntegerMutableBlockState#getCurrentState()",
      "cn.nukkit.blockstate.BigIntegerMutableBlockState#getDataStorage()",
      "cn.nukkit.blockstate.BigIntegerMutableBlockState#getIntValue(String)",
      "cn.nukkit.blockstate.BigIntegerMutableBlockState#getLegacyDamage()",
      "cn.nukkit.blockstate.BigIntegerMutableBlockState#getPersistenceValue(String)",
      "cn.nukkit.blockstate.BigIntegerMutableBlockState#getPropertyValue(String)",
      "cn.nukkit.blockstate.BigIntegerMutableBlockState#validate()"
    ]
  },
  "cn.nukkit.blockstate.BlockState": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.blockstate.BlockState#blockId",
      "cn.nukkit.blockstate.BlockState#getBigDamage()",
      "cn.nukkit.blockstate.BlockState#getBitSize()",
      "cn.nukkit.blockstate.BlockState#getBlock()",
      "cn.nukkit.blockstate.BlockState#getBlock(Level, int, int, int, int, boolean, Consumer)",
      "cn.nukkit.blockstate.BlockState#getBlockId()",
      "cn.nukkit.blockstate.BlockState#getBooleanValue(String)",
      "cn.nukkit.blockstate.BlockState#getCurrentState()",
      "cn.nukkit.blockstate.BlockState#getDataStorage()",
      "cn.nukkit.blockstate.BlockState#getIntValue(String)",
      "cn.nukkit.blockstate.BlockState#getLegacyDamage()",
      "cn.nukkit.blockstate.BlockState#getPersistenceValue(String)",
      "cn.nukkit.blockstate.BlockState#getProperties()",
      "cn.nukkit.blockstate.BlockState#getPropertyValue(String)"
    ]
  },
  "cn.nukkit.blockstate.BlockStateRepair": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.blockstate.BlockStateRepair#getBlockId()",
      "cn.nukkit.blockstate.BlockStateRepair#getBrokenPropertyMeta()",
      "cn.nukkit.blockstate.BlockStateRepair#getCurrentState()",
      "cn.nukkit.blockstate.BlockStateRepair#getFixedPropertyValue()",
      "cn.nukkit.blockstate.BlockStateRepair#getNextState()",
      "cn.nukkit.blockstate.BlockStateRepair#getOriginalState()",
      "cn.nukkit.blockstate.BlockStateRepair#getProperties()",
      "cn.nukkit.blockstate.BlockStateRepair#getProperty()",
      "cn.nukkit.blockstate.BlockStateRepair#getPropertyOffset()",
      "cn.nukkit.blockstate.BlockStateRepair#getProposedPropertyValue()",
      "cn.nukkit.blockstate.BlockStateRepair#getRepairs()",
      "cn.nukkit.blockstate.BlockStateRepair#getValidationException()",
      "cn.nukkit.blockstate.BlockStateRepair#<init>(int, BlockProperties, Number, Number, Number, int, BlockProperty, int, int, Serializable, Serializable, InvalidBlockPropertyException)"
    ]
  },
  "cn.nukkit.blockstate.ByteMutableBlockState": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.blockstate.ByteMutableBlockState#copy()",
      "cn.nukkit.blockstate.ByteMutableBlockState#getBigDamage()",
      "cn.nukkit.blockstate.ByteMutableBlockState#getBooleanValue(String)",
      "cn.nukkit.blockstate.ByteMutableBlockState#getCurrentState()",
      "cn.nukkit.blockstate.ByteMutableBlockState#getDataStorage()",
      "cn.nukkit.blockstate.ByteMutableBlockState#getIntValue(String)",
      "cn.nukkit.blockstate.ByteMutableBlockState#getLegacyDamage()",
      "cn.nukkit.blockstate.ByteMutableBlockState#getPersistenceValue(String)",
      "cn.nukkit.blockstate.ByteMutableBlockState#getPropertyValue(String)",
      "cn.nukkit.blockstate.ByteMutableBlockState#validate()"
    ]
  },
  "cn.nukkit.blockstate.IBlockState": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.blockstate.IBlockState#getBigId()"
    ]
  },
  "cn.nukkit.blockstate.IntMutableBlockState": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.blockstate.IntMutableBlockState#copy()",
      "cn.nukkit.blockstate.IntMutableBlockState#getBigDamage()",
      "cn.nukkit.blockstate.IntMutableBlockState#getBooleanValue(String)",
      "cn.nukkit.blockstate.IntMutableBlockState#getCurrentState()",
      "cn.nukkit.blockstate.IntMutableBlockState#getDataStorage()",
      "cn.nukkit.blockstate.IntMutableBlockState#getIntValue(String)",
      "cn.nukkit.blockstate.IntMutableBlockState#getLegacyDamage()",
      "cn.nukkit.blockstate.IntMutableBlockState#getPersistenceValue(String)",
      "cn.nukkit.blockstate.IntMutableBlockState#getPropertyValue(String)",
      "cn.nukkit.blockstate.IntMutableBlockState#validate()"
    ]
  },
  "cn.nukkit.blockstate.LongMutableBlockState": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.blockstate.LongMutableBlockState#copy()",
      "cn.nukkit.blockstate.LongMutableBlockState#getBigDamage()",
      "cn.nukkit.blockstate.LongMutableBlockState#getBooleanValue(String)",
      "cn.nukkit.blockstate.LongMutableBlockState#getCurrentState()",
      "cn.nukkit.blockstate.LongMutableBlockState#getDataStorage()",
      "cn.nukkit.blockstate.LongMutableBlockState#getIntValue(String)",
      "cn.nukkit.blockstate.LongMutableBlockState#getLegacyDamage()",
      "cn.nukkit.blockstate.LongMutableBlockState#getPersistenceValue(String)",
      "cn.nukkit.blockstate.LongMutableBlockState#getPropertyValue(String)",
      "cn.nukkit.blockstate.LongMutableBlockState#validate()"
    ]
  },
  "cn.nukkit.blockstate.MutableBlockState": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.blockstate.MutableBlockState#getBigId()",
      "cn.nukkit.blockstate.MutableBlockState#getBitSize()",
      "cn.nukkit.blockstate.MutableBlockState#getBlockId()",
      "cn.nukkit.blockstate.MutableBlockState#getFullId()",
      "cn.nukkit.blockstate.MutableBlockState#getProperties()"
    ]
  },
  "cn.nukkit.blockstate.ZeroMutableBlockState": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.blockstate.ZeroMutableBlockState#copy()",
      "cn.nukkit.blockstate.ZeroMutableBlockState#validate()"
    ]
  },
  "cn.nukkit.command.CapturingCommandSender": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.command.CapturingCommandSender#getCleanCapture()",
      "cn.nukkit.command.CapturingCommandSender#getRawCapture()",
      "cn.nukkit.command.CapturingCommandSender#resetCapture()",
      "cn.nukkit.command.CapturingCommandSender#<init>()",
      "cn.nukkit.command.CapturingCommandSender#<init>(String)",
      "cn.nukkit.command.CapturingCommandSender#<init>(String, boolean)",
      "cn.nukkit.command.CapturingCommandSender#<init>(String, boolean, Permissible)",
      "cn.nukkit.command.CapturingCommandSender#<init>(String, boolean, Function)"
    ]
  },
  "cn.nukkit.command.Command": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.command.Command#parseTilde(String, double)"
    ]
  },
  "cn.nukkit.dispenser.BoatDispenseBehavior": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.dispenser.BoatDispenseBehavior#dispense(BlockDispenser, BlockFace, Item)",
      "cn.nukkit.dispenser.BoatDispenseBehavior#<init>()"
    ]
  },
  "cn.nukkit.dispenser.BucketDispenseBehavior": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.dispenser.BucketDispenseBehavior#dispense(BlockDispenser, BlockFace, Item)"
    ]
  },
  "cn.nukkit.dispenser.DefaultDispenseBehavior": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.dispenser.DefaultDispenseBehavior#success"
    ]
  },
  "cn.nukkit.dispenser.DispenseBehaviorRegister": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.dispenser.DispenseBehaviorRegister#init()"
    ]
  },
  "cn.nukkit.dispenser.DropperDispenseBehavior": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.dispenser.DropperDispenseBehavior#<init>()"
    ]
  },
  "cn.nukkit.dispenser.DyeDispenseBehavior": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.dispenser.DyeDispenseBehavior#dispense(BlockDispenser, BlockFace, Item)",
      "cn.nukkit.dispenser.DyeDispenseBehavior#<init>()"
    ]
  },
  "cn.nukkit.dispenser.EmptyBucketDispenseBehavior": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.dispenser.EmptyBucketDispenseBehavior#dispense(BlockDispenser, BlockFace, Item)"
    ]
  },
  "cn.nukkit.dispenser.FireworksDispenseBehavior": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.dispenser.FireworksDispenseBehavior#dispense(BlockDispenser, BlockFace, Item)",
      "cn.nukkit.dispenser.FireworksDispenseBehavior#<init>()"
    ]
  },
  "cn.nukkit.dispenser.FlintAndSteelDispenseBehavior": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.dispenser.FlintAndSteelDispenseBehavior#dispense(BlockDispenser, BlockFace, Item)",
      "cn.nukkit.dispenser.FlintAndSteelDispenseBehavior#<init>()"
    ]
  },
  "cn.nukkit.dispenser.ProjectileDispenseBehavior": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.dispenser.ProjectileDispenseBehavior#dispense(BlockDispenser, BlockFace, Item)",
      "cn.nukkit.dispenser.ProjectileDispenseBehavior#getAccuracy()",
      "cn.nukkit.dispenser.ProjectileDispenseBehavior#getMotion()"
    ]
  },
  "cn.nukkit.dispenser.ShulkerBoxDispenseBehavior": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.dispenser.ShulkerBoxDispenseBehavior#dispense(BlockDispenser, BlockFace, Item)",
      "cn.nukkit.dispenser.ShulkerBoxDispenseBehavior#<init>()"
    ]
  },
  "cn.nukkit.dispenser.SpawnEggDispenseBehavior": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.dispenser.SpawnEggDispenseBehavior#dispense(BlockDispenser, BlockFace, Item)",
      "cn.nukkit.dispenser.SpawnEggDispenseBehavior#<init>()"
    ]
  },
  "cn.nukkit.dispenser.TNTDispenseBehavior": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.dispenser.TNTDispenseBehavior#dispense(BlockDispenser, BlockFace, Item)",
      "cn.nukkit.dispenser.TNTDispenseBehavior#<init>()"
    ]
  },
  "cn.nukkit.entity.Entity": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.Entity#canBePushed()",
      "cn.nukkit.entity.Entity#isTouchingWater()",
      "cn.nukkit.entity.Entity#isUndead()",
      "cn.nukkit.entity.Entity#onPushByPiston(BlockEntityPistonArm)"
    ]
  },
  "cn.nukkit.entity.EntityHuman": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.EntityHuman#onBlock(Entity, boolean)"
    ]
  },
  "cn.nukkit.entity.EntityLiving": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.EntityLiving#isBlocking()",
      "cn.nukkit.entity.EntityLiving#onBlock(Entity, boolean)",
      "cn.nukkit.entity.EntityLiving#setBlocking(boolean)"
    ]
  },
  "cn.nukkit.entity.item.EntityExpBottle": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.item.EntityExpBottle#addHitEffect()"
    ]
  },
  "cn.nukkit.entity.item.EntityFallingBlock": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.item.EntityFallingBlock#breakOnLava"
    ]
  },
  "cn.nukkit.entity.item.EntityPainting": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.item.EntityPainting#onPushByPiston(BlockEntityPistonArm)"
    ]
  },
  "cn.nukkit.entity.item.EntityPotion": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.item.EntityPotion#splash(Entity)"
    ]
  },
  "cn.nukkit.entity.item.EntityPotionLingering": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.item.EntityPotionLingering#splash(Entity)"
    ]
  },
  "cn.nukkit.entity.mob.EntityBlaze": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityBlaze#isPreventingSleep(Player)"
    ]
  },
  "cn.nukkit.entity.mob.EntityCaveSpider": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityCaveSpider#isPreventingSleep(Player)"
    ]
  },
  "cn.nukkit.entity.mob.EntityCreeper": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityCreeper#isPreventingSleep(Player)"
    ]
  },
  "cn.nukkit.entity.mob.EntityDrowned": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityDrowned#isPreventingSleep(Player)",
      "cn.nukkit.entity.mob.EntityDrowned#isUndead()"
    ]
  },
  "cn.nukkit.entity.mob.EntityElderGuardian": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityElderGuardian#isPreventingSleep(Player)"
    ]
  },
  "cn.nukkit.entity.mob.EntityEnderman": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityEnderman#isPreventingSleep(Player)"
    ]
  },
  "cn.nukkit.entity.mob.EntityEndermite": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityEndermite#isPreventingSleep(Player)"
    ]
  },
  "cn.nukkit.entity.mob.EntityEvoker": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityEvoker#isPreventingSleep(Player)"
    ]
  },
  "cn.nukkit.entity.mob.EntityGuardian": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityGuardian#isPreventingSleep(Player)"
    ]
  },
  "cn.nukkit.entity.mob.EntityHoglin": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityHoglin#isBaby()"
    ]
  },
  "cn.nukkit.entity.mob.EntityHusk": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityHusk#isPreventingSleep(Player)",
      "cn.nukkit.entity.mob.EntityHusk#isUndead()"
    ]
  },
  "cn.nukkit.entity.mob.EntityPhantom": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityPhantom#isPreventingSleep(Player)",
      "cn.nukkit.entity.mob.EntityPhantom#isUndead()"
    ]
  },
  "cn.nukkit.entity.mob.EntityPiglin": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityPiglin#isBaby()",
      "cn.nukkit.entity.mob.EntityPiglin#isPreventingSleep(Player)"
    ]
  },
  "cn.nukkit.entity.mob.EntityPiglinBrute": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityPiglinBrute#isPreventingSleep(Player)"
    ]
  },
  "cn.nukkit.entity.mob.EntityPillager": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityPillager#isPreventingSleep(Player)"
    ]
  },
  "cn.nukkit.entity.mob.EntityRavager": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityRavager#isPreventingSleep(Player)"
    ]
  },
  "cn.nukkit.entity.mob.EntitySilverfish": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntitySilverfish#isPreventingSleep(Player)"
    ]
  },
  "cn.nukkit.entity.mob.EntitySkeleton": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntitySkeleton#isPreventingSleep(Player)",
      "cn.nukkit.entity.mob.EntitySkeleton#isUndead()"
    ]
  },
  "cn.nukkit.entity.mob.EntitySpider": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntitySpider#isPreventingSleep(Player)"
    ]
  },
  "cn.nukkit.entity.mob.EntityStray": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityStray#isPreventingSleep(Player)",
      "cn.nukkit.entity.mob.EntityStray#isUndead()"
    ]
  },
  "cn.nukkit.entity.mob.EntityVex": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityVex#isPreventingSleep(Player)"
    ]
  },
  "cn.nukkit.entity.mob.EntityVindicator": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityVindicator#isPreventingSleep(Player)"
    ]
  },
  "cn.nukkit.entity.mob.EntityWitch": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityWitch#isPreventingSleep(Player)"
    ]
  },
  "cn.nukkit.entity.mob.EntityWither": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityWither#isPreventingSleep(Player)",
      "cn.nukkit.entity.mob.EntityWither#isUndead()"
    ]
  },
  "cn.nukkit.entity.mob.EntityWitherSkeleton": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityWitherSkeleton#isPreventingSleep(Player)",
      "cn.nukkit.entity.mob.EntityWitherSkeleton#isUndead()"
    ]
  },
  "cn.nukkit.entity.mob.EntityZoglin": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityZoglin#isBaby()",
      "cn.nukkit.entity.mob.EntityZoglin#isPreventingSleep(Player)",
      "cn.nukkit.entity.mob.EntityZoglin#isUndead()"
    ]
  },
  "cn.nukkit.entity.mob.EntityZombie": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityZombie#isPreventingSleep(Player)",
      "cn.nukkit.entity.mob.EntityZombie#isUndead()"
    ]
  },
  "cn.nukkit.entity.mob.EntityZombiePigman": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityZombiePigman#isPreventingSleep(Player)",
      "cn.nukkit.entity.mob.EntityZombiePigman#isUndead()"
    ]
  },
  "cn.nukkit.entity.mob.EntityZombieVillager": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityZombieVillager#isPreventingSleep(Player)",
      "cn.nukkit.entity.mob.EntityZombieVillager#isUndead()"
    ]
  },
  "cn.nukkit.entity.mob.EntityZombieVillagerV1": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.mob.EntityZombieVillagerV1#isUndead()"
    ]
  },
  "cn.nukkit.entity.passive.EntityBee": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.passive.EntityBee#getHasNectar()",
      "cn.nukkit.entity.passive.EntityBee#isAngry()",
      "cn.nukkit.entity.passive.EntityBee#leftBeehive(BlockEntityBeehive)",
      "cn.nukkit.entity.passive.EntityBee#nectarDelivered(BlockEntityBeehive)",
      "cn.nukkit.entity.passive.EntityBee#setAngry(boolean)",
      "cn.nukkit.entity.passive.EntityBee#setAngry(Player)",
      "cn.nukkit.entity.passive.EntityBee#setHasNectar(boolean)"
    ]
  },
  "cn.nukkit.entity.passive.EntitySkeletonHorse": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.passive.EntitySkeletonHorse#isUndead()"
    ]
  },
  "cn.nukkit.entity.passive.EntityTurtle": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.passive.EntityTurtle#setBreedingAge(int)",
      "cn.nukkit.entity.passive.EntityTurtle#setHomePos(Vector3)"
    ]
  },
  "cn.nukkit.entity.passive.EntityZombieHorse": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.passive.EntityZombieHorse#isUndead()"
    ]
  },
  "cn.nukkit.entity.projectile.EntityArrow": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.projectile.EntityArrow#addHitEffect()"
    ]
  },
  "cn.nukkit.entity.projectile.EntityEgg": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.projectile.EntityEgg#addHitEffect()"
    ]
  },
  "cn.nukkit.entity.projectile.EntityProjectile": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.projectile.EntityProjectile#inaccurate(float)",
      "cn.nukkit.entity.projectile.EntityProjectile#updateRotation()"
    ]
  },
  "cn.nukkit.entity.projectile.EntitySnowball": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.projectile.EntitySnowball#addHitEffect()"
    ]
  },
  "cn.nukkit.entity.projectile.EntityThrownTrident": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.entity.projectile.EntityThrownTrident#gravity",
      "cn.nukkit.entity.projectile.EntityThrownTrident#drag",
      "cn.nukkit.entity.projectile.EntityThrownTrident#create(Object, Position, Object[])",
      "cn.nukkit.entity.projectile.EntityThrownTrident#isCritical()",
      "cn.nukkit.entity.projectile.EntityThrownTrident#setCritical()",
      "cn.nukkit.entity.projectile.EntityThrownTrident#setCritical(boolean)"
    ]
  },
  "cn.nukkit.event.blockstate.BlockStateRepairFinishEvent": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.event.blockstate.BlockStateRepairFinishEvent#getResult()"
    ]
  },
  "cn.nukkit.event.entity.CreatureSpawnEvent": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.event.entity.CreatureSpawnEvent#<init>(int, Position, SpawnReason)"
    ]
  },
  "cn.nukkit.event.entity.EntityExplodeEvent": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.event.entity.EntityExplodeEvent#ignitions"
    ]
  },
  "cn.nukkit.event.inventory.EnchantItemEvent": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.event.inventory.EnchantItemEvent#oldItem",
      "cn.nukkit.event.inventory.EnchantItemEvent#newItem",
      "cn.nukkit.event.inventory.EnchantItemEvent#xpCost",
      "cn.nukkit.event.inventory.EnchantItemEvent#enchanter"
    ]
  },
  "cn.nukkit.event.player.PlayerBucketEmptyEvent": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.event.player.PlayerBucketEmptyEvent#<init>(Player, Block, BlockFace, Block, Item, Item)"
    ]
  },
  "cn.nukkit.event.player.PlayerBucketEvent": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.event.player.PlayerBucketEvent#<init>(Player, Block, BlockFace, Block, Item, Item)"
    ]
  },
  "cn.nukkit.event.player.PlayerBucketFillEvent": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.event.player.PlayerBucketFillEvent#<init>(Player, Block, BlockFace, Block, Item, Item)"
    ]
  },
  "cn.nukkit.event.vehicle.VehicleDamageEvent": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.event.vehicle.VehicleDamageEvent#<init>(EntityVehicle, double)"
    ]
  },
  "cn.nukkit.event.vehicle.VehicleDestroyEvent": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.event.vehicle.VehicleDestroyEvent#<init>(Entity)"
    ]
  },
  "cn.nukkit.inventory.BaseInventory": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.inventory.BaseInventory#addListener(InventoryListener)",
      "cn.nukkit.inventory.BaseInventory#removeListener(InventoryListener)"
    ]
  },
  "cn.nukkit.inventory.BlastFurnaceRecipe": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.inventory.BlastFurnaceRecipe#getInput()"
    ]
  },
  "cn.nukkit.inventory.CampfireRecipe": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.inventory.CampfireRecipe#getInput()"
    ]
  },
  "cn.nukkit.inventory.CraftingManager": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.inventory.CraftingManager#blastFurnaceRecipes",
      "cn.nukkit.inventory.CraftingManager#smokerRecipes",
      "cn.nukkit.inventory.CraftingManager#campfireRecipes",
      "cn.nukkit.inventory.CraftingManager#stonecutterRecipes",
      "cn.nukkit.inventory.CraftingManager#cartographyRecipes",
      "cn.nukkit.inventory.CraftingManager#matchBlastFurnaceRecipe(Item)",
      "cn.nukkit.inventory.CraftingManager#matchCampfireRecipe(Item)",
      "cn.nukkit.inventory.CraftingManager#matchCartographyRecipe(List, Item, List)",
      "cn.nukkit.inventory.CraftingManager#matchSmokerRecipe(Item)",
      "cn.nukkit.inventory.CraftingManager#matchStonecutterRecipe(Item)",
      "cn.nukkit.inventory.CraftingManager#registerBlastFurnaceRecipe(BlastFurnaceRecipe)",
      "cn.nukkit.inventory.CraftingManager#registerCampfireRecipe(CampfireRecipe)",
      "cn.nukkit.inventory.CraftingManager#registerCartographyRecipe(CartographyRecipe)",
      "cn.nukkit.inventory.CraftingManager#registerSmokerRecipe(SmokerRecipe)",
      "cn.nukkit.inventory.CraftingManager#registerStonecutterRecipe(StonecutterRecipe)"
    ]
  },
  "cn.nukkit.inventory.FurnaceInventory": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.inventory.FurnaceInventory#<init>(BlockEntityFurnace, InventoryType)"
    ]
  },
  "cn.nukkit.inventory.GrindstoneInventory": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.inventory.GrindstoneInventory#updateResult(boolean)"
    ]
  },
  "cn.nukkit.inventory.Inventory": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.inventory.Inventory#addListener(InventoryListener)",
      "cn.nukkit.inventory.Inventory#removeListener(InventoryListener)"
    ]
  },
  "cn.nukkit.inventory.PlayerUIInventory": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.inventory.PlayerUIInventory#onSlotChangeBase(int, Item, boolean)"
    ]
  },
  "cn.nukkit.inventory.SmokerRecipe": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.inventory.SmokerRecipe#getInput()"
    ]
  },
  "cn.nukkit.inventory.StonecutterInventory": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.inventory.StonecutterInventory#<init>(PlayerUIInventory, Position)"
    ]
  },
  "cn.nukkit.inventory.transaction.CraftingTransaction": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.inventory.transaction.CraftingTransaction#craftingType"
    ]
  },
  "cn.nukkit.inventory.transaction.EnchantTransaction": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.inventory.transaction.EnchantTransaction#inputItem",
      "cn.nukkit.inventory.transaction.EnchantTransaction#outputItem",
      "cn.nukkit.inventory.transaction.EnchantTransaction#cost"
    ]
  },
  "cn.nukkit.inventory.transaction.action.EnchantingAction": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.inventory.transaction.action.EnchantingAction#type"
    ]
  },
  "cn.nukkit.item.Item": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.Item#equalsIgnoringEnchantmentOrder(Item, boolean)",
      "cn.nukkit.item.Item#getBlock(int)",
      "cn.nukkit.item.Item#getBlock(int, Integer)",
      "cn.nukkit.item.Item#getBlock(int, Integer, int)",
      "cn.nukkit.item.Item#getBlock(int, Integer, int, byte[])"
    ]
  },
  "cn.nukkit.item.ItemAxeNetherite": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemAxeNetherite#isLavaResistant()"
    ]
  },
  "cn.nukkit.item.ItemBannerPattern": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemBannerPattern#updateName()"
    ]
  },
  "cn.nukkit.item.ItemBlock": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemBlock#isLavaResistant()"
    ]
  },
  "cn.nukkit.item.ItemBootsNetherite": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemBootsNetherite#isLavaResistant()"
    ]
  },
  "cn.nukkit.item.ItemChestplateNetherite": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemChestplateNetherite#isLavaResistant()"
    ]
  },
  "cn.nukkit.item.ItemEnderPearl": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemEnderPearl#correctProjectile(Player, Entity)"
    ]
  },
  "cn.nukkit.item.ItemFishingRod": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemFishingRod#damageWhenBreaking()"
    ]
  },
  "cn.nukkit.item.ItemHelmetNetherite": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemHelmetNetherite#isLavaResistant()"
    ]
  },
  "cn.nukkit.item.ItemHoeNetherite": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemHoeNetherite#isLavaResistant()"
    ]
  },
  "cn.nukkit.item.ItemIngotNetherite": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemIngotNetherite#isLavaResistant()"
    ]
  },
  "cn.nukkit.item.ItemLeggingsNetherite": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemLeggingsNetherite#isLavaResistant()"
    ]
  },
  "cn.nukkit.item.ItemPickaxeNetherite": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemPickaxeNetherite#isLavaResistant()"
    ]
  },
  "cn.nukkit.item.ItemPotionLingering": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemPotionLingering#correctNBT(CompoundTag)",
      "cn.nukkit.item.ItemPotionLingering#getProjectileEntityType()",
      "cn.nukkit.item.ItemPotionLingering#getThrowForce()"
    ]
  },
  "cn.nukkit.item.ItemScrapNetherite": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemScrapNetherite#isLavaResistant()"
    ]
  },
  "cn.nukkit.item.ItemShovelNetherite": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemShovelNetherite#isLavaResistant()"
    ]
  },
  "cn.nukkit.item.ItemSign": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemSign#<init>(int, Integer, int, String, BlockSignPost)"
    ]
  },
  "cn.nukkit.item.ItemSwordNetherite": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemSwordNetherite#isLavaResistant()"
    ]
  },
  "cn.nukkit.item.ItemTotem": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemTotem#<init>()"
    ]
  },
  "cn.nukkit.item.ItemWarpedFungusOnAStick": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ItemWarpedFungusOnAStick#damageWhenBreaking()"
    ]
  },
  "cn.nukkit.item.PNAlphaItemID": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.PNAlphaItemID#badItemId",
      "cn.nukkit.item.PNAlphaItemID#minecraftItemId",
      "cn.nukkit.item.PNAlphaItemID#getBadItemId()",
      "cn.nukkit.item.PNAlphaItemID#getMinecraftItemId()"
    ]
  },
  "cn.nukkit.item.ProjectileItem": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.ProjectileItem#addThrowSound(Player)",
      "cn.nukkit.item.ProjectileItem#correctProjectile(Player, Entity)"
    ]
  },
  "cn.nukkit.item.RuntimeItemMapping": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.RuntimeItemMapping#getItemDataPalette()",
      "cn.nukkit.item.RuntimeItemMapping#getLegacyFullId(int)",
      "cn.nukkit.item.RuntimeItemMapping#getNetworkFullId(Item)",
      "cn.nukkit.item.RuntimeItemMapping#<init>(byte[], Int2IntMap, Int2IntMap)"
    ]
  },
  "cn.nukkit.item.RuntimeItems": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.RuntimeItems#getData(int)",
      "cn.nukkit.item.RuntimeItems#getFullId(int, int)",
      "cn.nukkit.item.RuntimeItems#getId(int)",
      "cn.nukkit.item.RuntimeItems#getNetworkId(int)",
      "cn.nukkit.item.RuntimeItems#getRuntimeMapping()",
      "cn.nukkit.item.RuntimeItems#hasData(int)"
    ]
  },
  "cn.nukkit.item.enchantment.EnchantmentDurability": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.enchantment.EnchantmentDurability#isItemAcceptable(Item)"
    ]
  },
  "cn.nukkit.item.enchantment.EnchantmentEfficiency": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.enchantment.EnchantmentEfficiency#isItemAcceptable(Item)"
    ]
  },
  "cn.nukkit.item.enchantment.EnchantmentSilkTouch": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.enchantment.EnchantmentSilkTouch#isItemAcceptable(Item)"
    ]
  },
  "cn.nukkit.item.enchantment.EnchantmentThorns": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.enchantment.EnchantmentThorns#isItemAcceptable(Item)"
    ]
  },
  "cn.nukkit.item.enchantment.damage.EnchantmentDamage": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.enchantment.damage.EnchantmentDamage#isItemAcceptable(Item)"
    ]
  },
  "cn.nukkit.item.enchantment.sideeffect.SideEffect": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.item.enchantment.sideeffect.SideEffect#EMPTY_ARRAY"
    ]
  },
  "cn.nukkit.level.GameRule": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.GameRule#EXPERIMENTAL_GAMEPLAY"
    ]
  },
  "cn.nukkit.level.GlobalBlockPalette": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.GlobalBlockPalette#BLOCK_PALETTE",
      "cn.nukkit.level.GlobalBlockPalette#getName(int)"
    ]
  },
  "cn.nukkit.level.Level": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.Level#addLevelEvent(int, int)",
      "cn.nukkit.level.Level#addLevelEvent(int, int, Vector3)",
      "cn.nukkit.level.Level#addLevelEvent(int, int, float, float, float)",
      "cn.nukkit.level.Level#getBlock(Vector3, int)",
      "cn.nukkit.level.Level#getBlock(Vector3, int, boolean)",
      "cn.nukkit.level.Level#getBlock(int, int, int, int)",
      "cn.nukkit.level.Level#getBlock(int, int, int, int, boolean)",
      "cn.nukkit.level.Level#getBlockDataAt(int, int, int, int)",
      "cn.nukkit.level.Level#getBlockEntity(BlockVector3)",
      "cn.nukkit.level.Level#getBlockIdAt(int, int, int, int)",
      "cn.nukkit.level.Level#getBlockStateAt(int, int, int, int)",
      "cn.nukkit.level.Level#getCelestialAngle(float)",
      "cn.nukkit.level.Level#getCollisionBlocks(AxisAlignedBB, boolean, boolean)",
      "cn.nukkit.level.Level#getCollisionBlocks(AxisAlignedBB, boolean, boolean, Predicate)",
      "cn.nukkit.level.Level#getFullBlock(int, int, int, int)",
      "cn.nukkit.level.Level#getFuzzySpawnLocation()",
      "cn.nukkit.level.Level#getHighestAdjacentBlockSkyLight(int, int, int)",
      "cn.nukkit.level.Level#getRainStrength(float)",
      "cn.nukkit.level.Level#getThunderStrength(float)",
      "cn.nukkit.level.Level#setBlock(Vector3, int, Block)",
      "cn.nukkit.level.Level#setBlock(Vector3, int, Block, boolean)",
      "cn.nukkit.level.Level#setBlock(Vector3, int, Block, boolean, boolean)",
      "cn.nukkit.level.Level#setBlock(int, int, int, int, Block, boolean, boolean)",
      "cn.nukkit.level.Level#setBlockAtLayer(int, int, int, int, int, int)",
      "cn.nukkit.level.Level#setBlockDataAt(int, int, int, int, int)",
      "cn.nukkit.level.Level#setBlockFullIdAt(int, int, int, int, int)",
      "cn.nukkit.level.Level#setBlockIdAt(int, int, int, int, int)",
      "cn.nukkit.level.Level#useBreakOn(Vector3, BlockFace, Item, Player, boolean, boolean)",
      "cn.nukkit.level.Level#useBreakOn(Vector3, int, BlockFace, Item, Player, boolean, boolean)"
    ]
  },
  "cn.nukkit.level.ListChunkManager": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.ListChunkManager#getBlockDataAt(int, int, int, int)",
      "cn.nukkit.level.ListChunkManager#getBlockIdAt(int, int, int, int)",
      "cn.nukkit.level.ListChunkManager#setBlockAtLayer(int, int, int, int, int, int)",
      "cn.nukkit.level.ListChunkManager#setBlockDataAt(int, int, int, int, int)",
      "cn.nukkit.level.ListChunkManager#setBlockFullIdAt(int, int, int, int, int)",
      "cn.nukkit.level.ListChunkManager#setBlockIdAt(int, int, int, int, int)"
    ]
  },
  "cn.nukkit.level.Location": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.Location#setPitch(double)",
      "cn.nukkit.level.Location#setYaw(double)"
    ]
  },
  "cn.nukkit.level.Position": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.Position#getLevelBlockAtLayer(int)"
    ]
  },
  "cn.nukkit.level.biome.impl.beach.ColdBeachBiome": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.biome.impl.beach.ColdBeachBiome#getCoverBlock()"
    ]
  },
  "cn.nukkit.level.biome.impl.extremehills.StoneBeachBiome": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.biome.impl.extremehills.StoneBeachBiome#getGroundBlock(int)",
      "cn.nukkit.level.biome.impl.extremehills.StoneBeachBiome#getGroundDepth(int)",
      "cn.nukkit.level.biome.impl.extremehills.StoneBeachBiome#getSurfaceBlock(int)",
      "cn.nukkit.level.biome.impl.extremehills.StoneBeachBiome#getSurfaceDepth(int)"
    ]
  },
  "cn.nukkit.level.biome.impl.iceplains.IcePlainsSpikesBiome": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.biome.impl.iceplains.IcePlainsSpikesBiome#getSurfaceBlock(int)"
    ]
  },
  "cn.nukkit.level.biome.impl.mesa.MesaPlateauFBiome": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.biome.impl.mesa.MesaPlateauFBiome#getCoverBlock()"
    ]
  },
  "cn.nukkit.level.biome.impl.mushroom.MushroomIslandBiome": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.biome.impl.mushroom.MushroomIslandBiome#getSurfaceBlock(int)"
    ]
  },
  "cn.nukkit.level.biome.impl.taiga.ColdTaigaBiome": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.biome.impl.taiga.ColdTaigaBiome#getCoverBlock()"
    ]
  },
  "cn.nukkit.level.biome.type.CoveredBiome": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.biome.type.CoveredBiome#synchronizeCover",
      "cn.nukkit.level.biome.type.CoveredBiome#getCoverBlock()",
      "cn.nukkit.level.biome.type.CoveredBiome#getGroundDepth(int)",
      "cn.nukkit.level.biome.type.CoveredBiome#getGroundMeta(int)",
      "cn.nukkit.level.biome.type.CoveredBiome#getStoneBlock()",
      "cn.nukkit.level.biome.type.CoveredBiome#getSurfaceBlock(int)",
      "cn.nukkit.level.biome.type.CoveredBiome#getSurfaceDepth(int)",
      "cn.nukkit.level.biome.type.CoveredBiome#getSurfaceMeta(int)",
      "cn.nukkit.level.biome.type.CoveredBiome#preCover(int, int)"
    ]
  },
  "cn.nukkit.level.biome.type.GrassyBiome": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.biome.type.GrassyBiome#getGroundBlock(int)",
      "cn.nukkit.level.biome.type.GrassyBiome#getSurfaceBlock(int)"
    ]
  },
  "cn.nukkit.level.biome.type.SandyBiome": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.biome.type.SandyBiome#getGroundBlock(int)",
      "cn.nukkit.level.biome.type.SandyBiome#getGroundDepth(int)",
      "cn.nukkit.level.biome.type.SandyBiome#getSurfaceBlock(int)",
      "cn.nukkit.level.biome.type.SandyBiome#getSurfaceDepth(int)"
    ]
  },
  "cn.nukkit.level.biome.type.SnowyBiome": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.biome.type.SnowyBiome#getCoverBlock()"
    ]
  },
  "cn.nukkit.level.biome.type.WateryBiome": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.biome.type.WateryBiome#getGroundDepth(int)",
      "cn.nukkit.level.biome.type.WateryBiome#getSurfaceBlock(int)",
      "cn.nukkit.level.biome.type.WateryBiome#getSurfaceDepth(int)"
    ]
  },
  "cn.nukkit.level.format.ChunkSection": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.ChunkSection#setFullBlockId(int, int, int, int, int)"
    ]
  },
  "cn.nukkit.level.format.FullChunk": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.FullChunk#recalculateHeightMapColumn(int, int)"
    ]
  },
  "cn.nukkit.level.format.LevelProvider": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.LevelProvider#getMaximumLayer()"
    ]
  },
  "cn.nukkit.level.format.anvil.Anvil": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.anvil.Anvil#getMaximumLayer()"
    ]
  },
  "cn.nukkit.level.format.anvil.ChunkSection": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.anvil.ChunkSection#STREAM_STORAGE_VERSION",
      "cn.nukkit.level.format.anvil.ChunkSection#SAVE_STORAGE_VERSION",
      "cn.nukkit.level.format.anvil.ChunkSection#getAndSetBlock(int, int, int, int, Block)",
      "cn.nukkit.level.format.anvil.ChunkSection#getBlockChangeStateAbove(int, int, int)",
      "cn.nukkit.level.format.anvil.ChunkSection#getBlockData(int, int, int, int)",
      "cn.nukkit.level.format.anvil.ChunkSection#getBlockId(int, int, int, int)",
      "cn.nukkit.level.format.anvil.ChunkSection#getBlockState(int, int, int, int)",
      "cn.nukkit.level.format.anvil.ChunkSection#getFullBlock(int, int, int, int)",
      "cn.nukkit.level.format.anvil.ChunkSection#getMaximumLayer()",
      "cn.nukkit.level.format.anvil.ChunkSection#hasBlocks()",
      "cn.nukkit.level.format.anvil.ChunkSection#setBlockAtLayer(int, int, int, int, int)",
      "cn.nukkit.level.format.anvil.ChunkSection#setBlockAtLayer(int, int, int, int, int, int)",
      "cn.nukkit.level.format.anvil.ChunkSection#setBlockData(int, int, int, int, int)",
      "cn.nukkit.level.format.anvil.ChunkSection#setBlockId(int, int, int, int, int)",
      "cn.nukkit.level.format.anvil.ChunkSection#setBlockStateAtLayer(int, int, int, int, BlockState)",
      "cn.nukkit.level.format.anvil.ChunkSection#setFullBlockId(int, int, int, int, int)",
      "cn.nukkit.level.format.anvil.ChunkSection#toNBT()"
    ]
  },
  "cn.nukkit.level.format.anvil.util.BlockStorage": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.anvil.util.BlockStorage#SECTION_SIZE",
      "cn.nukkit.level.format.anvil.util.BlockStorage#hasBlockDataExtras()",
      "cn.nukkit.level.format.anvil.util.BlockStorage#hasBlockIdExtras()",
      "cn.nukkit.level.format.anvil.util.BlockStorage#hasBlockIds()"
    ]
  },
  "cn.nukkit.level.format.anvil.util.ImmutableBlockStorage": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.anvil.util.ImmutableBlockStorage#setBlockState(int, BlockState)"
    ]
  },
  "cn.nukkit.level.format.generic.BaseChunk": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.generic.BaseChunk#findBorders(int, int)",
      "cn.nukkit.level.format.generic.BaseChunk#getBlockData(int, int, int, int)",
      "cn.nukkit.level.format.generic.BaseChunk#getBlockStateAt(int, int, int, int)",
      "cn.nukkit.level.format.generic.BaseChunk#isBlockChangeAllowed(int, int, int)",
      "cn.nukkit.level.format.generic.BaseChunk#isBlockedByBorder(int, int)",
      "cn.nukkit.level.format.generic.BaseChunk#setBlockData(int, int, int, int, int)"
    ]
  },
  "cn.nukkit.level.format.generic.BaseFullChunk": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.generic.BaseFullChunk#getBlockDataAt(int, int, int, int)",
      "cn.nukkit.level.format.generic.BaseFullChunk#getBlockIdAt(int, int, int, int)",
      "cn.nukkit.level.format.generic.BaseFullChunk#recalculateHeightMapColumn(int, int)",
      "cn.nukkit.level.format.generic.BaseFullChunk#setBlockAtLayer(int, int, int, int, int)",
      "cn.nukkit.level.format.generic.BaseFullChunk#setBlockAtLayer(int, int, int, int, int, int)",
      "cn.nukkit.level.format.generic.BaseFullChunk#setBlockDataAt(int, int, int, int, int)",
      "cn.nukkit.level.format.generic.BaseFullChunk#setBlockFullIdAt(int, int, int, int, int)",
      "cn.nukkit.level.format.generic.BaseFullChunk#setBlockIdAt(int, int, int, int, int)"
    ]
  },
  "cn.nukkit.level.format.generic.EmptyChunkSection": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.generic.EmptyChunkSection#getAndSetBlock(int, int, int, int, Block)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#getBlockChangeStateAbove(int, int, int)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#getBlockData(int, int, int, int)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#getBlockId(int, int, int, int)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#getBlockState(int, int, int, int)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#getFullBlock(int, int, int, int)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#getMaximumLayer()",
      "cn.nukkit.level.format.generic.EmptyChunkSection#setBlockAtLayer(int, int, int, int, int)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#setBlockAtLayer(int, int, int, int, int, int)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#setBlockData(int, int, int, int, int)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#setBlockId(int, int, int, int, int)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#setBlockStateAtLayer(int, int, int, int, BlockState)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#setFullBlockId(int, int, int, int, int)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#toNBT()"
    ]
  },
  "cn.nukkit.level.format.updater.BeehiveUpdater": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.updater.BeehiveUpdater#update(int, int, int, int, int, int, BlockState)"
    ]
  },
  "cn.nukkit.level.format.updater.DoorUpdater": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.updater.DoorUpdater#update(int, int, int, int, int, int, BlockState)"
    ]
  },
  "cn.nukkit.level.format.updater.FrameUpdater": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.updater.FrameUpdater#update(int, int, int, int, int, int, BlockState)"
    ]
  },
  "cn.nukkit.level.format.updater.GroupedUpdaters": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.updater.GroupedUpdaters#update(int, int, int, int, int, int, BlockState)"
    ]
  },
  "cn.nukkit.level.format.updater.MesaBiomeUpdater": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.updater.MesaBiomeUpdater#update(int, int, int, int, int, int, BlockState)"
    ]
  },
  "cn.nukkit.level.format.updater.NewLeafUpdater": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.updater.NewLeafUpdater#update(int, int, int, int, int, int, BlockState)"
    ]
  },
  "cn.nukkit.level.format.updater.OldWoodBarkUpdater": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.updater.OldWoodBarkUpdater#update(int, int, int, int, int, int, BlockState)"
    ]
  },
  "cn.nukkit.level.format.updater.SnowLayerUpdater": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.updater.SnowLayerUpdater#update(int, int, int, int, int, int, BlockState)"
    ]
  },
  "cn.nukkit.level.format.updater.StemStrippedUpdater": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.updater.StemStrippedUpdater#update(int, int, int, int, int, int, BlockState)"
    ]
  },
  "cn.nukkit.level.format.updater.StemUpdater": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.updater.StemUpdater#update(int, int, int, int, int, int, BlockState)"
    ]
  },
  "cn.nukkit.level.format.updater.WallUpdater": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.updater.WallUpdater#update(int, int, int, int, int, int, BlockState)"
    ]
  },
  "cn.nukkit.level.generator.SimpleChunkManager": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.generator.SimpleChunkManager#getBlockDataAt(int, int, int, int)",
      "cn.nukkit.level.generator.SimpleChunkManager#getBlockIdAt(int, int, int, int)",
      "cn.nukkit.level.generator.SimpleChunkManager#getBlockStateAt(int, int, int, int)",
      "cn.nukkit.level.generator.SimpleChunkManager#setBlockAtLayer(int, int, int, int, int, int)",
      "cn.nukkit.level.generator.SimpleChunkManager#setBlockDataAt(int, int, int, int, int)",
      "cn.nukkit.level.generator.SimpleChunkManager#setBlockFullIdAt(int, int, int, int, int)",
      "cn.nukkit.level.generator.SimpleChunkManager#setBlockIdAt(int, int, int, int, int)"
    ]
  },
  "cn.nukkit.level.generator.object.ObjectNyliumVegetation": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.generator.object.ObjectNyliumVegetation#<init>()"
    ]
  },
  "cn.nukkit.level.generator.object.ObjectTallGrass": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.generator.object.ObjectTallGrass#growGrass(ChunkManager, Vector3, NukkitRandom, int, int)"
    ]
  },
  "cn.nukkit.level.generator.populator.impl.PopulatorGroundCover": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.generator.populator.impl.PopulatorGroundCover#STONE"
    ]
  },
  "cn.nukkit.level.generator.populator.impl.PopulatorOre": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.generator.populator.impl.PopulatorOre#setOreTypes(OreType[])",
      "cn.nukkit.level.generator.populator.impl.PopulatorOre#<init>()",
      "cn.nukkit.level.generator.populator.impl.PopulatorOre#<init>(int)"
    ]
  },
  "cn.nukkit.level.generator.populator.impl.PopulatorOreEmerald": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.generator.populator.impl.PopulatorOreEmerald#<init>()"
    ]
  },
  "cn.nukkit.math.AxisAlignedBB": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.math.AxisAlignedBB#getOffsetBoundingBox(BlockFace, double, double, double)"
    ]
  },
  "cn.nukkit.math.MathHelper": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.math.MathHelper#clamp(float, float, float)"
    ]
  },
  "cn.nukkit.nbt.tag.CompoundTag": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.nbt.tag.CompoundTag#<init>(String, Map)",
      "cn.nukkit.nbt.tag.CompoundTag#<init>(Map)"
    ]
  },
  "cn.nukkit.network.Network": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.network.Network#getPacket(byte)"
    ]
  },
  "cn.nukkit.network.protocol.AbstractResourcePackDataPacket": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.network.protocol.AbstractResourcePackDataPacket#<init>()"
    ]
  },
  "cn.nukkit.network.protocol.AnimateEntityPacket": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.network.protocol.AnimateEntityPacket#<init>()"
    ]
  },
  "cn.nukkit.network.protocol.DataPacket": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.network.protocol.DataPacket#EMPTY_ARRAY"
    ]
  },
  "cn.nukkit.network.protocol.ItemComponentPacket": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.network.protocol.ItemComponentPacket#<init>()"
    ]
  },
  "cn.nukkit.network.protocol.ItemStackResponsePacket": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.network.protocol.ItemStackResponsePacket#<init>()"
    ]
  },
  "cn.nukkit.network.protocol.PlayerActionPacket": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.network.protocol.PlayerActionPacket#ACTION_INTERACT_BLOCK"
    ]
  },
  "cn.nukkit.network.protocol.PositionTrackingDBClientRequestPacket": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.network.protocol.PositionTrackingDBClientRequestPacket#<init>()"
    ]
  },
  "cn.nukkit.network.protocol.PositionTrackingDBServerBroadcastPacket": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.network.protocol.PositionTrackingDBServerBroadcastPacket#<init>()"
    ]
  },
  "cn.nukkit.network.protocol.TickSyncPacket": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.network.protocol.TickSyncPacket#<init>()"
    ]
  },
  "cn.nukkit.plugin.PowerNukkitPlugin": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.plugin.PowerNukkitPlugin#<init>()"
    ]
  },
  "cn.nukkit.positiontracking.NamedPosition": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.positiontracking.NamedPosition#matchesNamedPosition(NamedPosition)"
    ]
  },
  "cn.nukkit.potion.Potion": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.potion.Potion#SLOWNESS_IV"
    ]
  },
  "cn.nukkit.utils.Hash": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.utils.Hash#hashBlock(Vector3)"
    ]
  },
  "cn.nukkit.utils.HumanStringComparator": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.utils.HumanStringComparator#<init>()"
    ]
  }
}