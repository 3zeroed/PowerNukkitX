{
  "cn.nukkit.level.Level": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.Level#getBlockEntity(BlockVector3)",
      "cn.nukkit.level.Level#setBlockDataAt(int, int, int, int, int)",
      "cn.nukkit.level.Level#setBlockFullIdAt(int, int, int, int, int)",
      "cn.nukkit.level.Level#setBlockIdAt(int, int, int, int, int)"
    ],
    "removePowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.Level#getBlockEntity(Vector3)",
      "cn.nukkit.level.Level#setBlockDataAt(int, int, int, int)",
      "cn.nukkit.level.Level#setBlockFullIdAt(int, int, int, int)",
      "cn.nukkit.level.Level#setBlockIdAt(int, int, int, int)"
    ]
  },
  "cn.nukkit.level.Location": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.Location#setPitch(double)",
      "cn.nukkit.level.Location#setYaw(double)"
    ]
  },
  "cn.nukkit.level.Position": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.Position#getLevelBlockAtLayer(int)"
    ]
  },
  "cn.nukkit.level.biome.impl.beach.ColdBeachBiome": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.biome.impl.beach.ColdBeachBiome#getCoverBlock()"
    ]
  },
  "cn.nukkit.level.biome.impl.extremehills.StoneBeachBiome": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.biome.impl.extremehills.StoneBeachBiome#getGroundBlock(int)",
      "cn.nukkit.level.biome.impl.extremehills.StoneBeachBiome#getGroundDepth(int)",
      "cn.nukkit.level.biome.impl.extremehills.StoneBeachBiome#getSurfaceBlock(int)",
      "cn.nukkit.level.biome.impl.extremehills.StoneBeachBiome#getSurfaceDepth(int)"
    ]
  },
  "cn.nukkit.level.biome.impl.iceplains.IcePlainsSpikesBiome": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.biome.impl.iceplains.IcePlainsSpikesBiome#getSurfaceBlock(int)"
    ]
  },
  "cn.nukkit.level.biome.impl.mesa.MesaPlateauFBiome": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.biome.impl.mesa.MesaPlateauFBiome#getCoverBlock()"
    ]
  },
  "cn.nukkit.level.biome.impl.mushroom.MushroomIslandBiome": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.biome.impl.mushroom.MushroomIslandBiome#getSurfaceBlock(int)"
    ]
  },
  "cn.nukkit.level.biome.impl.taiga.ColdTaigaBiome": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.biome.impl.taiga.ColdTaigaBiome#getCoverBlock()"
    ]
  },
  "cn.nukkit.level.biome.type.CoveredBiome": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.biome.type.CoveredBiome#synchronizeCover",
      "cn.nukkit.level.biome.type.CoveredBiome#getCoverBlock()",
      "cn.nukkit.level.biome.type.CoveredBiome#getGroundDepth(int)",
      "cn.nukkit.level.biome.type.CoveredBiome#getGroundMeta(int)",
      "cn.nukkit.level.biome.type.CoveredBiome#getStoneBlock()",
      "cn.nukkit.level.biome.type.CoveredBiome#getSurfaceBlock(int)",
      "cn.nukkit.level.biome.type.CoveredBiome#getSurfaceDepth(int)",
      "cn.nukkit.level.biome.type.CoveredBiome#getSurfaceMeta(int)",
      "cn.nukkit.level.biome.type.CoveredBiome#preCover(int, int)"
    ]
  },
  "cn.nukkit.level.biome.type.GrassyBiome": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.biome.type.GrassyBiome#getGroundBlock(int)",
      "cn.nukkit.level.biome.type.GrassyBiome#getSurfaceBlock(int)"
    ]
  },
  "cn.nukkit.level.biome.type.SandyBiome": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.biome.type.SandyBiome#getGroundBlock(int)",
      "cn.nukkit.level.biome.type.SandyBiome#getGroundDepth(int)",
      "cn.nukkit.level.biome.type.SandyBiome#getSurfaceBlock(int)",
      "cn.nukkit.level.biome.type.SandyBiome#getSurfaceDepth(int)"
    ]
  },
  "cn.nukkit.level.biome.type.SnowyBiome": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.biome.type.SnowyBiome#getCoverBlock()"
    ]
  },
  "cn.nukkit.level.biome.type.WateryBiome": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.biome.type.WateryBiome#getGroundDepth(int)",
      "cn.nukkit.level.biome.type.WateryBiome#getSurfaceBlock(int)",
      "cn.nukkit.level.biome.type.WateryBiome#getSurfaceDepth(int)"
    ]
  },
  "cn.nukkit.level.format.ChunkSection": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.ChunkSection#setFullBlockId(int, int, int, int, int)"
    ]
  },
  "cn.nukkit.level.format.FullChunk": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.FullChunk#recalculateHeightMapColumn(int, int)"
    ]
  },
  "cn.nukkit.level.format.LevelProvider": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.LevelProvider#getMaximumLayer()"
    ]
  },
  "cn.nukkit.level.format.anvil.Anvil": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.anvil.Anvil#getMaximumLayer()"
    ]
  },
  "cn.nukkit.level.format.anvil.ChunkSection": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.anvil.ChunkSection#STREAM_STORAGE_VERSION",
      "cn.nukkit.level.format.anvil.ChunkSection#SAVE_STORAGE_VERSION",
      "cn.nukkit.level.format.anvil.ChunkSection#getAndSetBlock(int, int, int, int, Block)",
      "cn.nukkit.level.format.anvil.ChunkSection#getBlockChangeStateAbove(int, int, int)",
      "cn.nukkit.level.format.anvil.ChunkSection#getBlockData(int, int, int, int)",
      "cn.nukkit.level.format.anvil.ChunkSection#getBlockId(int, int, int, int)",
      "cn.nukkit.level.format.anvil.ChunkSection#getBlockState(int, int, int, int)",
      "cn.nukkit.level.format.anvil.ChunkSection#getFullBlock(int, int, int, int)",
      "cn.nukkit.level.format.anvil.ChunkSection#getMaximumLayer()",
      "cn.nukkit.level.format.anvil.ChunkSection#hasBlocks()",
      "cn.nukkit.level.format.anvil.ChunkSection#setBlockAtLayer(int, int, int, int, int)",
      "cn.nukkit.level.format.anvil.ChunkSection#setBlockAtLayer(int, int, int, int, int, int)",
      "cn.nukkit.level.format.anvil.ChunkSection#setBlockData(int, int, int, int, int)",
      "cn.nukkit.level.format.anvil.ChunkSection#setBlockId(int, int, int, int, int)",
      "cn.nukkit.level.format.anvil.ChunkSection#setBlockStateAtLayer(int, int, int, int, BlockState)",
      "cn.nukkit.level.format.anvil.ChunkSection#setFullBlockId(int, int, int, int, int)",
      "cn.nukkit.level.format.anvil.ChunkSection#toNBT()"
    ]
  },
  "cn.nukkit.level.format.anvil.util.BlockStorage": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.anvil.util.BlockStorage#SECTION_SIZE",
      "cn.nukkit.level.format.anvil.util.BlockStorage#hasBlockDataExtras()",
      "cn.nukkit.level.format.anvil.util.BlockStorage#hasBlockIdExtras()",
      "cn.nukkit.level.format.anvil.util.BlockStorage#hasBlockIds()"
    ]
  },
  "cn.nukkit.level.format.anvil.util.ImmutableBlockStorage": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.anvil.util.ImmutableBlockStorage#setBlockState(int, BlockState)"
    ]
  },
  "cn.nukkit.level.format.generic.BaseChunk": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.generic.BaseChunk#findBorders(int, int)",
      "cn.nukkit.level.format.generic.BaseChunk#getBlockData(int, int, int, int)",
      "cn.nukkit.level.format.generic.BaseChunk#getBlockStateAt(int, int, int, int)",
      "cn.nukkit.level.format.generic.BaseChunk#isBlockChangeAllowed(int, int, int)",
      "cn.nukkit.level.format.generic.BaseChunk#isBlockedByBorder(int, int)",
      "cn.nukkit.level.format.generic.BaseChunk#setBlockData(int, int, int, int, int)"
    ]
  },
  "cn.nukkit.level.format.generic.BaseFullChunk": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.generic.BaseFullChunk#getBlockDataAt(int, int, int, int)",
      "cn.nukkit.level.format.generic.BaseFullChunk#getBlockIdAt(int, int, int, int)",
      "cn.nukkit.level.format.generic.BaseFullChunk#recalculateHeightMapColumn(int, int)",
      "cn.nukkit.level.format.generic.BaseFullChunk#setBlockAtLayer(int, int, int, int, int)",
      "cn.nukkit.level.format.generic.BaseFullChunk#setBlockAtLayer(int, int, int, int, int, int)",
      "cn.nukkit.level.format.generic.BaseFullChunk#setBlockDataAt(int, int, int, int, int)",
      "cn.nukkit.level.format.generic.BaseFullChunk#setBlockFullIdAt(int, int, int, int, int)",
      "cn.nukkit.level.format.generic.BaseFullChunk#setBlockIdAt(int, int, int, int, int)"
    ]
  },
  "cn.nukkit.level.format.generic.EmptyChunkSection": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.generic.EmptyChunkSection#getAndSetBlock(int, int, int, int, Block)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#getBlockChangeStateAbove(int, int, int)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#getBlockData(int, int, int, int)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#getBlockId(int, int, int, int)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#getBlockState(int, int, int, int)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#getFullBlock(int, int, int, int)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#getMaximumLayer()",
      "cn.nukkit.level.format.generic.EmptyChunkSection#setBlockAtLayer(int, int, int, int, int)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#setBlockAtLayer(int, int, int, int, int, int)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#setBlockData(int, int, int, int, int)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#setBlockId(int, int, int, int, int)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#setBlockStateAtLayer(int, int, int, int, BlockState)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#setFullBlockId(int, int, int, int, int)",
      "cn.nukkit.level.format.generic.EmptyChunkSection#toNBT()"
    ]
  },
  "cn.nukkit.level.format.updater.BeehiveUpdater": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.updater.BeehiveUpdater#update(int, int, int, int, int, int, BlockState)"
    ]
  },
  "cn.nukkit.level.format.updater.DoorUpdater": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.updater.DoorUpdater#update(int, int, int, int, int, int, BlockState)"
    ]
  },
  "cn.nukkit.level.format.updater.FrameUpdater": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.updater.FrameUpdater#update(int, int, int, int, int, int, BlockState)"
    ]
  },
  "cn.nukkit.level.format.updater.GroupedUpdaters": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.updater.GroupedUpdaters#update(int, int, int, int, int, int, BlockState)"
    ]
  },
  "cn.nukkit.level.format.updater.MesaBiomeUpdater": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.updater.MesaBiomeUpdater#update(int, int, int, int, int, int, BlockState)"
    ]
  },
  "cn.nukkit.level.format.updater.NewLeafUpdater": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.updater.NewLeafUpdater#update(int, int, int, int, int, int, BlockState)"
    ]
  },
  "cn.nukkit.level.format.updater.OldWoodBarkUpdater": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.updater.OldWoodBarkUpdater#update(int, int, int, int, int, int, BlockState)"
    ]
  },
  "cn.nukkit.level.format.updater.SnowLayerUpdater": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.updater.SnowLayerUpdater#update(int, int, int, int, int, int, BlockState)"
    ]
  },
  "cn.nukkit.level.format.updater.StemStrippedUpdater": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.updater.StemStrippedUpdater#update(int, int, int, int, int, int, BlockState)"
    ]
  },
  "cn.nukkit.level.format.updater.StemUpdater": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.updater.StemUpdater#update(int, int, int, int, int, int, BlockState)"
    ]
  },
  "cn.nukkit.level.format.updater.WallUpdater": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.format.updater.WallUpdater#update(int, int, int, int, int, int, BlockState)"
    ]
  },
  "cn.nukkit.level.generator.SimpleChunkManager": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.generator.SimpleChunkManager#getBlockDataAt(int, int, int, int)",
      "cn.nukkit.level.generator.SimpleChunkManager#getBlockIdAt(int, int, int, int)",
      "cn.nukkit.level.generator.SimpleChunkManager#getBlockStateAt(int, int, int, int)",
      "cn.nukkit.level.generator.SimpleChunkManager#setBlockAtLayer(int, int, int, int, int, int)",
      "cn.nukkit.level.generator.SimpleChunkManager#setBlockDataAt(int, int, int, int, int)",
      "cn.nukkit.level.generator.SimpleChunkManager#setBlockFullIdAt(int, int, int, int, int)",
      "cn.nukkit.level.generator.SimpleChunkManager#setBlockIdAt(int, int, int, int, int)"
    ]
  },
  "cn.nukkit.level.generator.object.ObjectNyliumVegetation": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.generator.object.ObjectNyliumVegetation#<init>()"
    ]
  },
  "cn.nukkit.level.generator.object.ObjectTallGrass": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.generator.object.ObjectTallGrass#growGrass(ChunkManager, Vector3, NukkitRandom, int, int)"
    ]
  },
  "cn.nukkit.level.generator.populator.impl.PopulatorGroundCover": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.generator.populator.impl.PopulatorGroundCover#STONE"
    ]
  },
  "cn.nukkit.level.generator.populator.impl.PopulatorOre": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.generator.populator.impl.PopulatorOre#setOreTypes(OreType[])",
      "cn.nukkit.level.generator.populator.impl.PopulatorOre#<init>()",
      "cn.nukkit.level.generator.populator.impl.PopulatorOre#<init>(int)"
    ]
  },
  "cn.nukkit.level.generator.populator.impl.PopulatorOreEmerald": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.level.generator.populator.impl.PopulatorOreEmerald#<init>()"
    ]
  },
  "cn.nukkit.math.AxisAlignedBB": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.math.AxisAlignedBB#getOffsetBoundingBox(BlockFace, double, double, double)"
    ]
  },
  "cn.nukkit.math.MathHelper": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.math.MathHelper#clamp(float, float, float)"
    ]
  },
  "cn.nukkit.nbt.tag.CompoundTag": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.nbt.tag.CompoundTag#<init>(String, Map)",
      "cn.nukkit.nbt.tag.CompoundTag#<init>(Map)"
    ]
  },
  "cn.nukkit.network.Network": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.network.Network#getPacket(byte)"
    ]
  },
  "cn.nukkit.network.protocol.AbstractResourcePackDataPacket": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.network.protocol.AbstractResourcePackDataPacket#<init>()"
    ]
  },
  "cn.nukkit.network.protocol.AnimateEntityPacket": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.network.protocol.AnimateEntityPacket#<init>()"
    ]
  },
  "cn.nukkit.network.protocol.DataPacket": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.network.protocol.DataPacket#EMPTY_ARRAY"
    ]
  },
  "cn.nukkit.network.protocol.ItemComponentPacket": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.network.protocol.ItemComponentPacket#<init>()"
    ]
  },
  "cn.nukkit.network.protocol.ItemStackResponsePacket": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.network.protocol.ItemStackResponsePacket#<init>()"
    ]
  },
  "cn.nukkit.network.protocol.PlayerActionPacket": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.network.protocol.PlayerActionPacket#ACTION_INTERACT_BLOCK"
    ]
  },
  "cn.nukkit.network.protocol.PositionTrackingDBClientRequestPacket": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.network.protocol.PositionTrackingDBClientRequestPacket#<init>()"
    ]
  },
  "cn.nukkit.network.protocol.PositionTrackingDBServerBroadcastPacket": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.network.protocol.PositionTrackingDBServerBroadcastPacket#<init>()"
    ]
  },
  "cn.nukkit.network.protocol.TickSyncPacket": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.network.protocol.TickSyncPacket#<init>()"
    ]
  },
  "cn.nukkit.plugin.PowerNukkitPlugin": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.plugin.PowerNukkitPlugin#<init>()"
    ]
  },
  "cn.nukkit.positiontracking.NamedPosition": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.positiontracking.NamedPosition#matchesNamedPosition(NamedPosition)"
    ]
  },
  "cn.nukkit.potion.Potion": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.potion.Potion#SLOWNESS_IV"
    ]
  },
  "cn.nukkit.utils.Hash": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.utils.Hash#hashBlock(Vector3)"
    ]
  },
  "cn.nukkit.utils.HumanStringComparator": {
    "addPowerNukkitOnlyAnnotation": [
      "cn.nukkit.utils.HumanStringComparator#<init>()"
    ]
  }
}